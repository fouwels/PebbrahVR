{"majorversion": 2, "classmap": {"GeoLocation": {"name": "GeoLocation", "constructors": [{"params": [{"type": "float", "name": "latitude", "description": " The latitude of the location, in decimal degrees."}, {"type": "float", "name": "longitude", "description": " The longitude of the location, in decimal degrees."}, {"type": "float", "name": "altitude", "description": " The altitude of the location, in meters (optional)."}], "description": "Every instance of GeoLocation represents a location in the\nearth's three-dimensional space. <br/><br/> A GeoLocation\nconsists of latitude and longitude and an optional altitude\nproperty. If the altitude is not specified, the altitude will be\nset to AR.CONST.UNKNOWN_ALTITUDE. In the application, the\naltitude of the location will implicitly set to the user's\ncurrent altitude. <br/><br/> The Coordinate system used is WGS\n84 (see <a\nhref=\"http://en.wikipedia.org/wiki/World_Geodetic_System\">the\nWikipedia article</a> for details). <br/><br/> Typically,\nGeoLocations will be created and then used for the creation of\nGeoObjects and ActionRanges. <br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar location1 = new AR.GeoLocation(47.77317, 13.069929);\nvar altitude = location1.altitude; //altitude = -32768\nvar location2 = new AR.GeoLocation(47.77317, 13.069929, 320.);\naltitude = location2.altitude; //alt = 320\nvar object1 = new AR.GeoObject(location1);\nvar object2 = new AR.GeoObject(location2);\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "GeoLocation", "extends": "Location", "superclass": "Location", "file": "architect_generated.js", "guessedtype": "property", "shortname": "GeoLocation", "properties": {"latitude": {"type": "float", "description": "The latitude of the location, in decimal\ndegrees. Values must be numeric values in range\n[-90, 90], otherwise, an Exception will be\nthrown."}, "altitude": {"default": "AR.CONST.UNKNOWN_ALTITUDE", "type": "float", "description": "The altitude of the location, in meters. Values\nmust be numeric values, otherwise, an Exception\nwill be thrown."}, "longitude": {"type": "float", "description": "The longitude of the location, in decimal\ndegrees. Values must be numeric values in range\n[-180, 180], otherwise, an Exception will be\nthrown."}}, "description": "Every instance of GeoLocation represents a location in the\nearth's three-dimensional space. <br/><br/> A GeoLocation\nconsists of latitude and longitude and an optional altitude\nproperty. If the altitude is not specified, the altitude will be\nset to AR.CONST.UNKNOWN_ALTITUDE. In the application, the\naltitude of the location will implicitly set to the user's\ncurrent altitude. <br/><br/> The Coordinate system used is WGS\n84 (see <a\nhref=\"http://en.wikipedia.org/wiki/World_Geodetic_System\">the\nWikipedia article</a> for details). <br/><br/> Typically,\nGeoLocations will be created and then used for the creation of\nGeoObjects and ActionRanges. <br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar location1 = new AR.GeoLocation(47.77317, 13.069929);\nvar altitude = location1.altitude; //altitude = -32768\nvar location2 = new AR.GeoLocation(47.77317, 13.069929, 320.);\naltitude = location2.altitude; //alt = 320\nvar object1 = new AR.GeoObject(location1);\nvar object2 = new AR.GeoObject(location2);\n</pre>"}, "Drawable2D": {"name": "Drawable2D", "namespace": "", "module": "AR", "guessedname": "Drawable2D", "methods": {"getBoundingRectangle": {"see": "BoundingRectangle", "return": {"type": "BoundingRectangle", "description": "the BoundingRectangle for the Drawable2D"}, "description": "Returns the BoundingRectangle for this Drawable2D. In case\nof an error, null will be returned.", "guessedname": "getBoundingRectangle", "guessedtype": "function"}}, "extends": "Drawable", "superclass": "Drawable", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Drawable2D", "properties": {"opacity": {"default": "1", "type": "float", "description": "A value within the interval from 0.0 to 1.0 defining the\nopacity of the entire Drawable2D. A value of 0 indicates\nfull transparency, a value of 1 indicates full opacity."}, "scale": {"default": "1", "type": "float", "description": "The scale factor for the Drawable2D. A scale factor\ngreater than 1 enlarges the drawable, a scale factor less\nthan 1 shrinks it down. Only values greater than or equal to 0 are\nallowed. A scale factor of 0 makes the Drawable2D invisible.\nA scale factor of 2 doubles the size of the\nDrawable2D, a scale factor of 0.5 halfs the size of the\nDrawable2D. Scale will influence the BoundingRectangle of\nthe Drawable, but it will not influence the original\nproperties of the Drawable2D."}, "verticalAnchor": {"type": "int", "description": "The vertical anchor defines which pixel (in a vertical pixel\ncolumn) of the Drawable2D will be placed right at the screen\nposition of the GeoObject represented by the Drawable2D.<br/><br/>\nValid values are defined in AR.CONST.VERTICAL_ANCHOR. For example, if TOP\nis set as horizontal anchor of an Image, the image's top edge will match\nthe calculated position of the Drawable2D.<br/><br/>\nThe default vertical anchor points is dependent on the concrete class of\nthe Drawable2D."}, "offsetX": {"default": "0", "type": "float", "description": "The horizontal offset to the calculated position of the\nDrawable2D, in <a href=\"./module_AR.html\">SDUs</a>. A positive offsetX causes the Drawable2D\nto move right, a negative offsetX causes it to move left."}, "offsetY": {"default": "0", "type": "float", "description": "The vertical offset to the calculated position of the\nDrawable2D, in <a href=\"./module_AR.html\">SDUs</a>. A positive offsetY causes the Drawable2D\nto move up, a negative offsetY causes it to move down."}, "scaling": {"deprecated": "Use scale instead.", "type": "float"}, "zOrder": {"default": "0", "type": "int", "description": "If multiple Drawable2Ds are assigned to a certain GeoObject, the zOrder defines the drawing order of these Drawables.\nIn case the Drawables overlap, the Drawable with the higher zOrder value is rendered on top of the others (e.g. a Drawable with\nzOrder 1 is rendered on top of a Drawable of zOrder 0, which again is rendered on top of -1).\nIn case Drawables have the same zOrder defined, and they overlap, the behavior is undefined and might cause unexpected results,\nthus it is good practice to define the zOrder for potentially overlapping Drawables.\n<br/><br/>\nTo specify the rendering order of the Drawables of different GeoObjects, refer to GeoObject.renderingOrder."}, "rotation": {"default": "0", "type": "float", "description": "Defines the rotation of the Drawable, in degrees, with the\nrotation axis perpendicular to the screen plain. For\nexample, setting rotation to 45.0 on a square plain image\nturns it into a rhombus. A positive value defines a rotation\nin clockwise direction, a negative value defines a rotation\nin anti-clockwise direction. Rotation can influence the\nBoundingRectangle of the Drawable (for example, when a\nRectangle is rotated).<br/><br/>\nNote, rotation is applied in addition to any roll-tilt-heading rotations defined.\nRotation specifies the rotation on the screen, with the origin of the rotation\nbeing the center of the Drawable2D, including any offsets etc."}, "horizontalAnchor": {"type": "int", "description": "The horizontal anchor defines which pixel (in a horizontal\npixel row) of the Drawable2D will be placed right at the\nscreen position of the GeoObject represented by the\nDrawable2D.<br/><br/>\nValid values are defined in AR.CONST.HORIZONTAL_ANCHOR. For example, if\nLEFT is set as horizontal anchor of an ImageDrawable, the image's left edge will\nmatch the calculated position of the Drawable2D.<br/><br/>\nThe default horizontal anchor points is dependent on the concrete class\nof the Drawable2D."}}, "description": "Drawable2D is the base class for Drawables representing\nGeoObjects as 2D objects. <br/><br/>\nDrawable2Ds can be scaled and rotated (rotation axis is defined as the normal\non the screen plain, causing a rotation on the screen), and an opacity can be\ndefined. They also allow for horizontal and vertical anchors, defining the\nanchor of Drawable2Ds on the screen relative to the GeoLocations of the\nreferenced GeoObject.<br/><br/>\nIn case a Drawable2D is used for representation of a GeoObject having\nmultiple GeoLocations, the Drawable2D will represent each GeoLocation\nseperately. For example, if a GeoObject has an array of 2 GeoLocations set as\nGeoObject.locations, two Drawable2Ds will be visible.<br/><br/>\nDrawable2D is a superclass for other classes and must not be directly\ninstantiated by the developer."}, "CONST": {"name": "CONST", "namespace": "", "module": "AR", "guessedname": "CONST", "static": "", "file": "architect_generated.js", "guessedtype": "property", "shortname": "CONST", "properties": {"FONT_STYLE": {"type": "object", "description": "The property holds various font styles as string properties.<br/><br/>\nThe following font styles are defined:\n<ul>\n<li>NORMAL</li>\n<li>BOLD</li>\n<li>ITALIC</li>\n</ul>\nOne can access it by writing e.g. AR.CONST.FONT_STYLE.NORMAL", "guessedname": "FONT_STYLE", "guessedtype": "property"}, "ANIMATION_GROUP_TYPE": {"type": "object", "description": "The property holds various animation group types as string\nproperties.<br/><br/>\nThe following Animation Group types are defined:<br/>\n<table>\n<tr><td><b>Constant<b></td><td><b>String Representation</b></td></tr>\n<tr><td>PARALLEL</td><td>parallel</td></tr>\n<tr><td>SEQUENTIAL</td><td>sequential</td></tr>\n</table><br/>\nOne can access it by writing e.g. AR.CONST.ANIMATION_GROUP_TYPE.PARALLEL", "guessedname": "ANIMATION_GROUP_TYPE", "guessedtype": "property"}, "VERTICAL_ANCHOR": {"type": "object", "description": "The property holds various vertical anchors as int\nproperties.<br/><br/>\nThe following vertical anchors are defined:\n<ul>\n<li>TOP</li>\n<li>MIDDLE</li>\n<li>BOTTOM</li>\n</ul>\nOne can access it by writing e.g. AR.CONST.VERTICAL_ANCHOR.TOP", "guessedname": "VERTICAL_ANCHOR", "guessedtype": "property"}, "STATE": {"type": "object", "description": "The property holds various states as int properties.<br/><br/>\nThe following states are defined:\n<ul>\n<li>INITIALIZED - The object is initialized, but no data is loaded.</li>\n<li>LOADING - The data is currently being loaded.</li>\n<li>LOADED - The data is loaded.</li>\n<li>PLAYING - The file is currently being played.</li>\n<li>ERROR - The file cannot be loaded or played. This can have various\nreasons, including the data not being fetchable, the file being corrupt\netc.</li>\n</ul>\nOne can access it by writing e.g. AR.CONST.STATE.INITIALIZED", "guessedname": "STATE", "guessedtype": "property"}, "CLICK_BEHAVIOR": {"type": "object", "description": "The different click behaviors available\nThe following click behaviors are defined:\n<ul>\n<li>CLICK</li>\n<li>TOUCH_UP</li>\n<li>TOUCH_DOWN</li>\n</ul>\nSee AR.context.clickBehavior for details.", "guessedname": "CLICK_BEHAVIOR", "guessedtype": "property"}, "HORIZONTAL_ANCHOR": {"type": "object", "description": "The property holds various horizontal anchors as int\nproperties.<br/><br/>\nThe following horizontal anchors are defined:\n<ul>\n<li>LEFT</li>\n<li>CENTER</li>\n<li>RIGHT</li>\n</ul>\nOne can access it by writing e.g. AR.CONST.HORIZONTAL_ANCHOR.LEFT", "guessedname": "HORIZONTAL_ANCHOR", "guessedtype": "property"}, "EASING_CURVE_TYPE": {"type": "object", "description": "The property holds various easing curve types as string\nproperties.<br/><br/>\nThe following Easing Curve types are defined:<br/>\n<table>\n<tr><td><b>Constant<b></td><td><b>String Representation</b></td></tr>\n<tr><td>LINEAR</td><td>linear</td></tr>\n<tr><td>EASE_IN_QUAD</td><td>easeInQuad</td></tr>\n<tr><td>EASE_OUT_QUAD</td><td>easeOutQuad</td></tr>\n<tr><td>EASE_IN_OUT_QUAD</td><td>easeInOutQuad</td></tr>\n<tr><td>EASE_OUT_IN_QUAD</td><td>easeOutInQuad</td></tr>\n<tr><td>EASE_IN_CUBIC</td><td>easeInCubic</td></tr>\n<tr><td>EASE_OUT_CUBIC</td><td>easeOutCubic</td></tr>\n<tr><td>EASE_IN_OUT_CUBIC</td><td>easeInOutCubic</td></tr>\n<tr><td>EASE_OUT_IN_CUBIC</td><td>easeOutInCubic</td></tr>\n<tr><td>EASE_IN_QUAT</td><td>easeInQuat</td></tr>\n<tr><td>EASE_OUT_QUAT</td><td>easeOutQuat</td></tr>\n<tr><td>EASE_IN_OUT_QUAT</td><td>easeInOutQuat</td></tr>\n<tr><td>EASE_OUT_IN_QUAT</td><td>easeOutInQuat</td></tr>\n<tr><td>EASE_IN_QUINT</td><td>easeInQuint</td></tr>\n<tr><td>EASE_OUT_QUINT</td><td>easeOutQuint</td></tr>\n<tr><td>EASE_IN_OUT_QUINT</td><td>easeInOutQuint</td></tr>\n<tr><td>EASE_OUT_IN_QUINT</td><td>easeOutInQuint</td></tr>\n<tr><td>EASE_IN_ELASTIC</td><td>easeInElastic</td></tr>\n<tr><td>EASE_OUT_ELASTIC</td><td>easeOutElastic</td></tr>\n<tr><td>EASE_IN_OUT_ELASTIC</td><td>easeInOutElastic</td></tr>\n<tr><td>EASE_OUT_IN_ELASTIC</td><td>easeOutInElastic</td></tr>\n<tr><td>EASE_IN_BACK</td><td>easeInBack</td></tr>\n<tr><td>EASE_OUT_BACK</td><td>easeOutBack</td></tr>\n<tr><td>EASE_IN_OUT_BACK</td><td>easeInOutBack</td></tr>\n<tr><td>EASE_OUT_IN_BACK</td><td>easeOutInBack</td></tr>\n<tr><td>EASE_IN_SINE</td><td>easeInSine</td></tr>\n<tr><td>EASE_OUT_SINE</td><td>easeOutSine</td></tr>\n<tr><td>EASE_IN_OUT_SINE</td><td>easeInOutSine</td></tr>\n<tr><td>EASE_OUT_IN_SINE</td><td>easeOutInSine</td></tr>\n<tr><td>EASE_IN_EXPO</td><td>easeInExpo</td></tr>\n<tr><td>EASE_OUT_EXPO</td><td>easeOutExpo</td></tr>\n<tr><td>EASE_IN_OUT_EXPO</td><td>easeInOutExpo</td></tr>\n<tr><td>EASE_OUT_IN_EXPO</td><td>easeOutInExpo</td></tr>\n<tr><td>EASE_IN_CIRC</td><td>easeInCirc</td></tr>\n<tr><td>EASE_OUT_CIRC</td><td>easeOutCirc</td></tr>\n<tr><td>EASE_IN_OUT_CIRC</td><td>easeInOutCirc</td></tr>\n<tr><td>EASE_OUT_IN_CIRC</td><td>easeOutInCirc</td></tr>\n<tr><td>EASE_IN_BOUNCE</td><td>easeInBounce</td></tr>\n<tr><td>EASE_OUT_BOUNCE</td><td>easeOutBounce</td></tr>\n<tr><td>EASE_IN_OUT_BOUNCE</td><td>easeInOutBounce</td></tr>\n<tr><td>EASE_OUT_IN_BOUNCE</td><td>easeOutInBounce</td></tr>\n<tr><td>EASE_IN_CURVE</td><td>easeInCurve</td></tr>\n<tr><td>EASE_OUT_CURVE</td><td>easeOutCurve</td></tr>\n</table><br/>\nA detailed description on the various easing curve types are described <a\nhref=\"http://doc.qt.nokia.com/solutions/4/qtanimationframework/qteasingcurve.html\">here</a>.\nOne can access it by writing e.g. AR.CONST.EASING_CURVE_TYPE.LINEAR", "guessedname": "EASING_CURVE_TYPE", "guessedtype": "property"}, "UNKNOWN_ALTITUDE": {"type": "int", "description": "The value indicating that the altitude is unknown or cannot\nbe fetched.<br/><br/>\nIt is set to -32768 meters. This altitude-level is impossible on the\nearth's surface.<br/><br/>\nIn case a GeoLocation has set its altitude to UNKNOWN_ALTITUDE, the true\naltitude will be assumed to be on the same altitude level as the user.", "guessedname": "UNKNOWN_ALTITUDE", "guessedtype": "property"}, "LOCATION_ACCURACY": {"type": "object", "description": "The level of accuracy of a location reported back from the\nsystem. The property holds various accuracy levels as int\nproperties.<br/><br/>\nThe following accuracy levels are defined:\n<ul>\n<li>HIGH - the reported location is very accurate with a potential\ninaccuracy of up to 10 meters</li>\n<li>MEDIUM - the reported location is fairly accurate with a potential\ninaccuracy between 10 and 35 meters</li>\n<li>LOW - the reported location is inaccurate with a potential\ninaccuracy of more than 35 meters</li>\n</ul>\nOne can access it by writing e.g. AR.CONST.LOCATION_ACCURACY.LOW", "guessedname": "LOCATION_ACCURACY", "guessedtype": "property"}}, "description": "A static class containing constant values. The Singleton\ninstance of CONST will automatically be created on startup."}, "Style": {"name": "Style", "namespace": "", "module": "AR", "guessedname": "Style", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Style", "properties": {"fontStyle": {"default": "AR.CONST.FONT_STYLE.NORMAL", "type": "string", "description": "The font style of the text. Valid values are\nspecified in AR.CONST.FONT_STYLE."}, "outlineSize": {"default": "0", "type": "int", "description": "Defines the thickness of an outline which is printed\nfrom the boundary of the Drawable towards the\ninside.<br/><br/>\nValid values are in the range between 0 and 128. A value of 0\nmeans no outline, a value of 128 covers the entire Drawable.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar circle = new AR.Circle(20, {\n&nbsp;&nbsp;style : {\n&nbsp;&nbsp;&nbsp;&nbsp;fillColor : '#FFFFFF', //white circle\n&nbsp;&nbsp;&nbsp;&nbsp;outlineColor : '#000000' //black outline\n&nbsp;&nbsp;}\n});\n<br/>\ncircle.style.outlineSize = 0; //no outline, circle appears fully white\ncircle.style.outlineSize = 128; //outline fully covers the circle, circle appears fully black\ncircle.style.outlineSize = 90; //circle appears half black (outer area), half white (inner area)\n</pre>"}, "fillColor": {"default": "#000000FF (solid black)", "type": "string", "description": "The fill color of the Drawable. Can be passed as\nhexadecimal RGB or RGBA values (see <a\nhref=\"http://en.wikipedia.org/wiki/RGBA\">here</a>\nfor details on RGBA colorcoding). In case RGB is\nused, the alpha value is set to full opacity."}, "backgroundColor": {"default": "#00000000 (transparent)", "type": "string", "description": "The background color of the Drawable. Can be passed\nas hexadecimal RGB or RGBA values (see <a\nhref=\"http://en.wikipedia.org/wiki/RGBA\">here</a>\nfor details on RGBA colorcoding). In case RGB is\nused, the alpha value is set to full opacity."}, "textColor": {"default": "#000000FF (solid black)", "type": "string", "description": "The text color. Can be passed as hexadecimal RGB or\nRGBA values (see <a\nhref=\"http://en.wikipedia.org/wiki/RGBA\">here</a>\nfor details on RGBA colorcoding). In case RGB is\nused, the alpha value is set to full opacity."}, "outlineColor": {"default": "#00000000 (transparent)", "type": "string", "description": "The fill color of the outline bounding the Drawable.\nCan be passed as hexadecimal RGB or RGBA values (see\n<a href=\"http://en.wikipedia.org/wiki/RGBA\">here</a>\nfor details on RGBA colorcoding). In case RGB is\nused, the alpha value is set to full opacity."}}, "description": "Style options allow the customization of the appearance of\nvarious Drawables.<br/><br/>\nA Style is never created with <i>new</i>, it has to be created using\nJSON, as described in the example below.<br/><br/>\nNote that Drawable-types accept only a certain set of properties in Style.\nThe accepted options are listed for each Drawable, other options are simply\nignored.<br/><br/>\nWhen a Style is passed to a Drawable, the properties are passed by value,\nmodifications on the Style object after applying it to a Drawable will not\nhave any effect on the Drawable's style. Use drawable.style to later\ncustomize the Style for a specific Drawable.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a Style, red fill color, green outline\nvar myStyle = {fillColor : '#FF0000', outlineSize : 2, outlineColor : '#00FF00'};\n<br/>\n//applying style options on creation of 2 circles\nvar circle1 = new AR.Circle(40, {style : myStyle});\nvar circle2 = new AR.Circle(50, {style : myStyle});\n<br/>\n//now, we change circle1's fill color to blue. circle2 will not change its color.\ncircle1.style.fillColor = '#0000FF';\n</pre>"}, "Label": {"name": "Label", "constructors": [{"params": [{"type": "string", "name": "text", "description": " The text to be displayed on the Label."}, {"type": "float", "name": "height", "description": " The height of the Label, in <a href=\"./module_AR.html\">SDUs</a>"}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>enabled</li>\n<li>horizontalAnchor</li>\n<li>verticalAnchor</li>\n<li>offsetX</li>\n<li>offsetY</li>\n<li>zOrder</li>\n<li>rotation</li>\n<li>scale</li>\n<li>opacity</li>\n<li>onClick</li>\n<li>style.backgroundColor</li>\n<li>style.textColor</li>\n<li>style.fontStyle</li>\n<li>roll</li>\n<li>tilt</li>\n<li>heading</li>\n</ul>"}], "description": "A Label drawable represents an ARObject as text.<br/><br/>\nThe default anchor settings for a Label are as follows:\n<ul>\n<li>horizontal anchor: AR.CONST.HORIZONTAL_ANCHOR.CENTER</li>\n<li>vertical anchor: AR.CONST.VERTICAL_ANCHOR.MIDDLE</li>\n</ul>\nOn creation, setup parameters can be passed to customize the properties of\nthe Label.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new label and pass some setup parameters\nvar label = new AR.Label(&quot;&quot;, 20, {\n&nbsp;&nbsp;offsetY : 1,\n&nbsp;&nbsp;onClick : function() {\n&nbsp;&nbsp;&nbsp;&nbsp;label.text += &quot;CLICK &quot;\n&nbsp;&nbsp;},\n&nbsp;&nbsp;verticalAnchor : AR.CONST.VERTICAL_ANCHOR.TOP,\n&nbsp;&nbsp;opacity : 0.1\n});\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "Label", "extends": "Drawable2D", "superclass": "Drawable2D", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Label", "properties": {"text": {"type": "string", "description": "The text of the label."}, "style": {"type": "{object}", "description": "The Style to be passed. Valid values are:\n<ul>\n<li>backgroundColor</li>\n<li>textColor</li>\n<li>fontStyle</li>\n</ul>"}, "height": {"type": "float", "description": "The height of the Label, in <a href=\"./module_AR.html\">SDUs</a>. Effectively, this will\ndefine the size of the Label."}}, "description": "A Label drawable represents an ARObject as text.<br/><br/>\nThe default anchor settings for a Label are as follows:\n<ul>\n<li>horizontal anchor: AR.CONST.HORIZONTAL_ANCHOR.CENTER</li>\n<li>vertical anchor: AR.CONST.VERTICAL_ANCHOR.MIDDLE</li>\n</ul>\nOn creation, setup parameters can be passed to customize the properties of\nthe Label.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new label and pass some setup parameters\nvar label = new AR.Label(&quot;&quot;, 20, {\n&nbsp;&nbsp;offsetY : 1,\n&nbsp;&nbsp;onClick : function() {\n&nbsp;&nbsp;&nbsp;&nbsp;label.text += &quot;CLICK &quot;\n&nbsp;&nbsp;},\n&nbsp;&nbsp;verticalAnchor : AR.CONST.VERTICAL_ANCHOR.TOP,\n&nbsp;&nbsp;opacity : 0.1\n});\n</pre>"}, "radar": {"name": "radar", "namespace": "", "module": "AR", "guessedname": "OneTimeUseRadarConstructionPlan", "methods": {"onClick": {"description": "The trigger fires when the radar (the area taken up by the background image) has been clicked.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onClick."}}, "static": "", "file": "architect_generated.js", "guessedtype": "property", "shortname": "radar", "properties": {"positionX": {"type": "float", "description": "Specifies the position of the left edge of the radar background image. The value\nmust be between 0 and 1. A value of 0 places the left edge of the radar background image on the left edge of the screen, 0.5\nplaces the left edge horizontally in the middle of the screen."}, "positionY": {"type": "float", "description": "Specifies the position of the top edge of the radar background image. The value\nmust be between 0 and 1. A value of 0 places the top edge of the radar background image on the top edge of the screen, 0.5\nplaces the top edge vertically in the middle of the screen."}, "background": {"type": "ImageResource", "description": "Specifies the background of the radar."}, "enabled": {"type": "boolean", "description": "enabled set to true enables the radar in the view, setting\nit to false disables it entirely.<br/><br/> <b>Remark:</b>\nThe radar can only be displayed if all properties (the only\nexception being the northIndicator) is set to a valid value."}, "width": {"type": "float", "description": "Specifies the width of the radar background image, in percent of the portrait screen width.\nThe value must be between 0 and 1. A value of 0.1 sizes the radar background image in a way that\nthe width of the image makes up 10% of the entire screen width.<br/>\nThe aspect ratio of the radar background image will not be changed, the height of the radar will\nthus be automatically calculated."}, "radius": {"type": "float", "description": "Specifies the radius of the actual radar area. The radar drawables will not be visible beyond that radius.\nThe value must be between 0 and 1 and specifies the radius with regards to the width of the background image.\nA value of 0.4 scales the radius of the actual radar area to 40% of the entire width of the radar background image."}, "centerX": {"type": "float", "description": "Specifies the horizontal position of the center of the actual radar area. The value\nmust be between 0 and 1 and specifies the center of the radar area with regards to the width of the background image.\nA value of 0.5 places the center of the radar area horizontally in the middle of the radar background image."}, "centerY": {"type": "float", "description": "Specifies the vertical position of the center of the actual radar area. The value\nmust be between 0 and 1 and specifies the center of the radar area with regards to the height of the background image.\nA value of 0.5 places the center of the radar area vertically in the middle of the radar background image."}, "northIndicator.image": {"type": "ImageResource", "description": "Specifies the ImageResource used to indicate true north in the radar. The north indicator will be scaled\nwith the same ratio as the radar background image is scaled, refer radar.width for details."}, "maxDistance": {"type": "float", "description": "Specifies the maximum distance in meters that is covered in the radar. When set to x meters, only\nGeoObjects with a distance less or equal to x will be drawn in the radar. If the distance to a certain drawable is\nx, the drawable will be drawn on the boundary of the radar.<br/><br/>\nThe value must either be positive, or undefined. In this case, maxDistance will automatically be calculated as\nthe maximum distance of the GeoObjects in the scene, causing all GeoObjects to be visible in the radar."}, "northIndicator.radius": {"type": "float", "description": "Specifies the radius of the north indicator.\nAs the north indicator moves as soon as the user starts turning around, northIndicator.radius indicates the distance\nof the north indicator image to the center of the radar area. \nThe value must be between 0 and 1 and specifies the radius with regards to the width of the radar background image.\nA value of 0.45 scales the radius of the actual radar area to 45% of the entire width of the radar background image.\n<br/><br/>\nIt is good practice to set the radius of the north indicator to a slightly higher value that the radar's radius.\nThis allows the north indicator to not overlap with the radar area."}}, "description": "radar represents a seperate section on the screen which provides\na 2-dimensional radar indicating where GeoObjects are located\naround the user.<br/><br/>\nThe Singleton instance of the class will automatically be created on World\nstartup and can be accessed via AR.radar.<br/><br/>\nThe meaning of the various properties are described below, refer to the figure below for illustration.<br/><br/>\n<img src=\"assets/radarCS.png\" /><br/><br/>"}, "Animation": {"name": "Animation", "namespace": "", "module": "AR", "guessedname": "Animation", "methods": {"pause": {"description": "Pauses the Animation.<br/>\nIf the PropertyAnimation is currently not running, the call will have no effect.", "guessedname": "pause", "guessedtype": "function"}, "isRunning": {"return": {"type": "boolean", "description": "<ul>\n<li>true if the Animation is currently running.</li>\n<li>false if the Animation is currently not running.</li>\n</ul>"}, "description": "Checks if the Animation is currently running.", "guessedname": "isRunning", "guessedtype": "function"}, "resume": {"description": "Resumes the Animation.<br/>\nIf the PropertyAnimation is currently running, the call has no effect. Otherwise, it will either be resumed from the position where it was last paused,\nor will start from the beginning if it was not paused.", "guessedname": "resume", "guessedtype": "function"}, "stop": {"description": "Immediately stops the Animation. Allows manual\nstopping of the Animation before the animation would\nautomatically stop. The onFinish-trigger will not be fired\nafter a manual stopping.", "guessedname": "stop", "guessedtype": "function"}, "onStart": {"description": "The trigger will fire right before the Animation starts.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onStart."}, "start": {"params": [{"type": "int", "name": "loopTimes", "description": " Defines how often the animation should be played.\nA negative value indicates an infinite looping.<br/>\nThe parameter is optional and defaults to 1."}], "description": "Immediately starts the Animation.", "guessedname": "start", "guessedtype": "function"}, "onFinish": {"description": "The trigger will fire when the Animation finishes.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onFinish."}}, "extends": "ARchitectObject", "superclass": "ARchitectObject", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Animation", "description": "Animations allow constant changes to numeric\nvalues/properties of an object. <br/><br/> Animations can be\nseen as functions defining the progress of the change on the\nvalue.<br/><br/> \nIt is an abstract class that must not be instantiated directly."}, "Location": {"name": "Location", "namespace": "", "module": "AR", "guessedname": "Location", "methods": {"distanceTo": {"return": {"type": "float", "description": "The numeric distance in meters."}, "params": [{"type": "Location", "name": "location", "description": " The Location the distance should be\ncalculated for."}], "description": "Returns the shortest distance (\"as the crow flies\")\nto the Location passed as an argument, ignoring any altitude property.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar location1 = new AR.GeoLocation(47.77317, 13.069929);\nvar location2 = new AR.GeoLocation(47.77317, 13.069929, 320.);\nvar location3 = new AR.GeoLocation(47.77317, 14.069929, 640.);\nvar dist = location2.distanceTo(location1); //dist = 0.\ndist = location2.distanceTo(location3); //dist = 74730.\n</pre>", "guessedname": "distanceTo", "guessedtype": "function"}, "distanceToUser": {"return": {"type": "float", "description": "The numeric distance in meters."}, "description": "Returns the shortest distance (\"as the crow flies\")\nto the current location of the user, ignoring any altitude property.<br/><br/>\nIf the current position of the user cannot be determined, undefined will be returned.", "guessedname": "distanceToUser", "guessedtype": "function"}}, "extends": "ARchitectObject", "superclass": "ARchitectObject", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Location", "description": "Location is an abstract class which describes a general\nlocation of a POI in the augmented scene.<br/><br/>\nIt should never be instantiated directly."}, "ActionRange": {"name": "ActionRange", "constructors": [{"params": [{"type": "Location", "name": "location", "description": " a single Location defining the center point of the\ncircle."}, {"type": "float", "name": "radius", "description": " the radius of the ActionRange in meters."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties. <br/><br/> Accepted options-properties are\n<ul>\n<li>enabled</li>\n<li>onEnter</li>\n<li>onExit</li>\n</ul>"}], "description": "An ActionRange defines a circle around a certain Location.\nEvents are fired as soon as the user enters or leaves this\ncircle.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar location1 = new AR.GeoLocation(47.77317, 13.069929);\nvar actionRange = new AR.ActionRange(location1, 500);\nvar location2 = new AR.GeoLocation(48.77317, 13.069929);\nvar inArea = actionRange.isInArea(location1); //inArea = true\nvar inArea = actionRange.isInArea(location2); //inArea = false\n</pre>\nOn creation, setup parameters can be passed to customize the properties of\nthe ImageDrawable.<br/><br/>\n<pre class=\"prettyprint\">\nvar actionRange2 = new AR.ActionRange(location1, 500, {\nonEnter : function() {\nactionRange2.enabled = false; //an ActionArea which can only be entered once\n}\n});\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "ActionRange", "extends": "ActionArea", "superclass": "ActionArea", "file": "architect_generated.js", "guessedtype": "property", "shortname": "ActionRange", "properties": {"geoLocation": {"deprecated": "Use location instead.", "type": "GeoLocation"}, "radius": {"type": "float", "description": "The radius of the ActionRange, in <a\nhref=\"./module_AR.html\">SDUs</a>."}, "location": {"type": "Location", "description": "The Location object which defines the center of the\nActionRange"}}, "description": "An ActionRange defines a circle around a certain Location.\nEvents are fired as soon as the user enters or leaves this\ncircle.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar location1 = new AR.GeoLocation(47.77317, 13.069929);\nvar actionRange = new AR.ActionRange(location1, 500);\nvar location2 = new AR.GeoLocation(48.77317, 13.069929);\nvar inArea = actionRange.isInArea(location1); //inArea = true\nvar inArea = actionRange.isInArea(location2); //inArea = false\n</pre>\nOn creation, setup parameters can be passed to customize the properties of\nthe ImageDrawable.<br/><br/>\n<pre class=\"prettyprint\">\nvar actionRange2 = new AR.ActionRange(location1, 500, {\nonEnter : function() {\nactionRange2.enabled = false; //an ActionArea which can only be entered once\n}\n});\n</pre>"}, "Circle": {"name": "Circle", "constructors": [{"params": [{"type": "float", "name": "radius", "description": " The radius of the circle, in SDUs. Must be a positive number."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>enabled</li>\n<li>horizontalAnchor</li>\n<li>verticalAnchor</li>\n<li>offsetX</li>\n<li>offsetY</li>\n<li>zOrder</li>\n<li>rotation</li>\n<li>scale</li>\n<li>opacity</li>\n<li>onClick</li>\n<li>style.fillColor</li>\n<li>style.outlineSize</li>\n<li>style.outlineColor</li>\n<li>roll</li>\n<li>tilt</li>\n<li>heading</li>\n</ul>\n<b>Remark:</b> rotation is a valid property for a Circle, however, it won't have any visual effect."}], "description": "A Circle drawable represents an ARObject as a plain circle.<br/><br/>\nThe default anchor settings for a Circle are as follows:\n<ul>\n<li>horizontal anchor: AR.CONST.HORIZONTAL_ANCHOR.CENTER</li>\n<li>vertical anchor: AR.CONST.VERTICAL_ANCHOR.MIDDLE</li>\n</ul>\nOn creation, setup parameters can be passed to customize the properties of\nthe Circle.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new circle and pass some setup parameters to the circle\nvar circle = new AR.Circle(30, {\n&nbsp;&nbsp;offsetX : 1,\n&nbsp;&nbsp;onClick : function() {\n&nbsp;&nbsp;&nbsp;&nbsp;circle.radius *= 2;\n&nbsp;&nbsp;},\n&nbsp;&nbsp;horizontalAnchor : AR.CONST.HORIZONTAL_ANCHOR.LEFT,\n&nbsp;&nbsp;opacity : 0.9\n});\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "Circle", "extends": "Drawable2D", "superclass": "Drawable2D", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Circle", "properties": {"style": {"type": "{object}", "description": "The Style object describing the style of the Circle.\nValid values are:\n<ul>\n<li>fillColor</li>\n<li>outlineSize</li>\n<li>outlineColor</li>\n</ul>"}, "radius": {"type": "float", "description": "The radius of the Circle, in <a href=\"./module_AR.html\">SDUs</a>. Must be a positive number."}}, "description": "A Circle drawable represents an ARObject as a plain circle.<br/><br/>\nThe default anchor settings for a Circle are as follows:\n<ul>\n<li>horizontal anchor: AR.CONST.HORIZONTAL_ANCHOR.CENTER</li>\n<li>vertical anchor: AR.CONST.VERTICAL_ANCHOR.MIDDLE</li>\n</ul>\nOn creation, setup parameters can be passed to customize the properties of\nthe Circle.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new circle and pass some setup parameters to the circle\nvar circle = new AR.Circle(30, {\n&nbsp;&nbsp;offsetX : 1,\n&nbsp;&nbsp;onClick : function() {\n&nbsp;&nbsp;&nbsp;&nbsp;circle.radius *= 2;\n&nbsp;&nbsp;},\n&nbsp;&nbsp;horizontalAnchor : AR.CONST.HORIZONTAL_ANCHOR.LEFT,\n&nbsp;&nbsp;opacity : 0.9\n});\n</pre>"}, "Model": {"name": "Model", "constructors": [{"params": [{"type": "string", "name": "uri", "description": " An URI pointing to the zip file including all model information/a>"}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>enabled</li>\n<li>rotate\n<ul>\n<li>roll</li>\n<li>tilt</li>\n<li>heading</li>\n</ul>\n</li>\n<li>scale\n<ul>\n<li>x</li>\n<li>y</li>\n<li>z</li>\n</ul>\n</li>\n<li>translate\n<ul>\n<li>x</li>\n<li>y</li>\n<li>z</li>\n</ul>\n</li>\n<li>onClick</li>\n<li>onLoaded</li>\n<li>onError</li>\n</ul>"}], "description": "A Model drawable represents an ARObject as a 3D Model.<br/><br/>\nA Model file consist of a link to a zip file that is created using the Wikitude Model Generator,\nas well as certain control properties and triggers that fire on certain events.\n<br/><br/>\nOn creation, setup parameters can be passed to customize the properties of\nthe Model.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new Model and pass some setup parameters\nvar model = new AR.Model(\"models/my3dModel.wt3\", {\n&nbsp;&nbsp;// scales it to half of the original size\n&nbsp;&nbsp;scale: {\n&nbsp;&nbsp;&nbsp;&nbsp;x: 0.5, \n&nbsp;&nbsp;&nbsp;&nbsp;y: 0.5,\n&nbsp;&nbsp;&nbsp;&nbsp;z: 0.5\n&nbsp;&nbsp;},\n&nbsp;&nbsp;// rotates it 90 degrees around the z-axis and 180 degrees around the x-axis\n&nbsp;&nbsp;rotate: {\n&nbsp;&nbsp;&nbsp;&nbsp;roll: 90.0,\n&nbsp;&nbsp;&nbsp;&nbsp;tilt: 180.0,\n&nbsp;&nbsp;&nbsp;&nbsp;heading: 0.0\n&nbsp;&nbsp;},\n&nbsp;&nbsp;// moves the 0bject 5 SDUs along the x- and the y-axis\n&nbsp;&nbsp;translate: {\n&nbsp;&nbsp;&nbsp;&nbsp;x: 5,\n&nbsp;&nbsp;&nbsp;&nbsp;y: 5,\n&nbsp;&nbsp;&nbsp;&nbsp;z: 0\n&nbsp;&nbsp;},\n&nbsp;&nbsp;onClick : function() {\n&nbsp;&nbsp;&nbsp;&nbsp;//something happens\n&nbsp;&nbsp;}\n});\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "Model", "methods": {"onError": {"description": "The trigger will fire when the Model file cannot be loaded.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onLoaded."}, "onLoaded": {"description": "The trigger will fire when the Model file is successfully loaded.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onLoaded."}, "isLoaded": {"return": {"type": "boolean", "description": "<ul>\n<li>true if the Model is already loaded.</li>\n<li>false if the Model is not yet loaded.</li>\n</ul>"}, "description": "Allows checking if the Model has already been loaded\nsuccessfully.", "guessedname": "isLoaded", "guessedtype": "function"}}, "extends": "Drawable", "superclass": "Drawable", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Model", "properties": {"scale.z": {"default": "1", "type": "float", "description": "The scale in z-direction. Must be non-negative."}, "scale.y": {"default": "1", "type": "float", "description": "The scale in y-direction. Must be non-negative."}, "scale.x": {"default": "1", "type": "float", "description": "The scale in x-direction. Must be non-negative."}, "uri": {"type": "string", "description": "The uri pointing to the model file. This property is read-only and cannot be modified after creation."}, "translate.z": {"default": "0", "type": "float", "description": "The depth-offset to the calculated position of the\nModel, in <a href=\"./module_AR.html\">SDUs</a>. A positive z causes the Model\nto move towards the user, a negative offsetX causes it to move away."}, "translate.y": {"default": "0", "type": "float", "description": "The vertical offset to the calculated position of the\nModel, in <a href=\"./module_AR.html\">SDUs</a>. A positive y causes the Model\nto move up, a negative offsetX causes it to move down."}, "translate.x": {"default": "0", "type": "float", "description": "The horizontal offset to the calculated position of the\nModel, in <a href=\"./module_AR.html\">SDUs</a>. A positive x causes the Model\nto move right, a negative offsetX causes it to move left."}}, "description": "A Model drawable represents an ARObject as a 3D Model.<br/><br/>\nA Model file consist of a link to a zip file that is created using the Wikitude Model Generator,\nas well as certain control properties and triggers that fire on certain events.\n<br/><br/>\nOn creation, setup parameters can be passed to customize the properties of\nthe Model.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new Model and pass some setup parameters\nvar model = new AR.Model(\"models/my3dModel.wt3\", {\n&nbsp;&nbsp;// scales it to half of the original size\n&nbsp;&nbsp;scale: {\n&nbsp;&nbsp;&nbsp;&nbsp;x: 0.5, \n&nbsp;&nbsp;&nbsp;&nbsp;y: 0.5,\n&nbsp;&nbsp;&nbsp;&nbsp;z: 0.5\n&nbsp;&nbsp;},\n&nbsp;&nbsp;// rotates it 90 degrees around the z-axis and 180 degrees around the x-axis\n&nbsp;&nbsp;rotate: {\n&nbsp;&nbsp;&nbsp;&nbsp;roll: 90.0,\n&nbsp;&nbsp;&nbsp;&nbsp;tilt: 180.0,\n&nbsp;&nbsp;&nbsp;&nbsp;heading: 0.0\n&nbsp;&nbsp;},\n&nbsp;&nbsp;// moves the 0bject 5 SDUs along the x- and the y-axis\n&nbsp;&nbsp;translate: {\n&nbsp;&nbsp;&nbsp;&nbsp;x: 5,\n&nbsp;&nbsp;&nbsp;&nbsp;y: 5,\n&nbsp;&nbsp;&nbsp;&nbsp;z: 0\n&nbsp;&nbsp;},\n&nbsp;&nbsp;onClick : function() {\n&nbsp;&nbsp;&nbsp;&nbsp;//something happens\n&nbsp;&nbsp;}\n});\n</pre>"}, "GeoObject": {"methods": {"drawables.addRadarDrawable": {"params": [{"type": "Drawable2D|Array(Drawable2D)", "name": "drawable", "description": " The drawable(s) that should be added to the radar. Can either be a\nsingle Drawable2D, or an Array of Drawable2Ds."}, {"type": "int", "name": "position", "description": " The position where the Drawable2D should be added in the array. If\nnot specified, the Drawable2D will be added at the end of the\narray."}], "description": "Adds Drawable2Ds to the GeoObject in the radar.", "guessedname": "addRadarDrawable", "guessedtype": "function"}, "drawables.removeRadarDrawable": {"params": [{"type": "Drawable2D|Array(Drawable2D)|int", "name": "drawable|position", "description": " When a single Drawable2D or an Array of\nDrawable2Ds is given, these Drawable2Ds will be removed from the\narray. When an integer is given, the Drawable2D at the specified\nposition will be removed."}], "description": "Removes Drawable2Ds from the GeoObject in the radar.", "guessedname": "removeRadarDrawable", "guessedtype": "function"}, "drawables.addIndicatorDrawable": {"params": [{"type": "Drawable2D|Array(Drawable2D)", "name": "drawable", "description": " The drawable(s) that should be added. Can either be a\nsingle Drawable2D, or an Array of Drawable2Ds."}, {"type": "int", "name": "position", "description": " The position where the Drawable2D should be added in the array. If\nnot specified, the Drawable2D will be added at the end of the\narray."}], "description": "Adds Drawable2Ds as off-screen-indicators to the GeoObject.", "guessedname": "addIndicatorDrawable", "guessedtype": "function"}, "drawables.removeIndicatorDrawable": {"params": [{"type": "Drawable2D|Array(Drawable2D)|int", "name": "drawable|position", "description": " When a single Drawable2D or an Array of\nDrawable2Ds is given, these Drawable2Ds will be removed from the\narray. When an integer is given, the Drawable2D at the specified\nposition will be removed."}], "description": "Removes Drawable2Ds as indicators from the GeoObject.", "guessedname": "removeIndicatorDrawable", "guessedtype": "function"}}, "description": "A GeoObject represents a virtual object bound to specific\nlocations in the earth's 3-dimensional space. Any GeoObject is\nlinked to at least one Location.<br/><br/>\nA GeoObject\n<ul>\n<li>must have at least one location and can never exist without at least one\nlocation.</li>\n<li>can have Drawables associated with it. These Drawables will represent\nthe GeoObject in the camera view.</li>\n<li>can have triggers associated with it. Triggers fire on certain events\nand execute functions to react on these actions.</li>\n</ul>\nOn creation, a reference to Locations must be passed to define where the\nGeoObject is located in the real world. <br/><br/> A GeoObject can either be\nenabled or disabled (see ARObject.enabled). Enabled means that the GeoObject\nwill be considered in the calculations to project its drawables onto the\ncamera screen, and its triggers will fire on the appropriate events. In case\nthe GeoObject is disabled, it will not be considered in the calculations, and\nit will not fire any triggers. <br/><br/>\nOn creation, setup parameters can be passed to customize the properties of\nthe GeoObject.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n// a GeoObject which is disabled per default\nvar geoObject1 = new AR.GeoObject(geoLocation1, {\n&nbsp;&nbsp;enabled : false\n});\n// now, we enable geoObject1 so it will is considered for projection.\ngeoObject1.enabled = true;\n<br/>\n// a GeoObject which reacts when the GeoObject becomes visible and invisible.\n// whenever it becomes visible, the altitude is increased by 1 meter\n// whenever it becomes invisible, the altitude decreases by 1 meter.\nvar geoObject2 = new AR.GeoObject(geoLocation1);\ngeoObject2.onEnterFieldOfVision = function() {\n&nbsp;&nbsp;geoObject2.locations[0].altitude++;\n};\ngeoObject2.onExitFieldOfVision = function() {\n&nbsp;&nbsp;geoObject2.locations[0].altitude--;\n};\n<br/>\n// a GeoObject which has two locations set\nvar geoObject3 = new AR.GeoObject( [ geoLocation1, geoLocation2 ], null);\n<br/>\n// a GeoObject with triggers and drawables set on creation date \nvar geoObject4 = new AR.GeoObject(locations, {\n&nbsp;&nbsp;//the function executed when the GeoObject enters the field of vision\n&nbsp;&nbsp;onEnterFieldOfVision : function(){ ... },\n&nbsp;&nbsp;//the function executed when the GeoObject exits the field of vision\n&nbsp;&nbsp;onExitFieldOfVision : function(){ ... },\n&nbsp;&nbsp;drawables : { cam :\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[drawable1, drawable2] //the drawables representing the GeoObject in the camera view\n&nbsp;&nbsp;}\n});\n<br/>\n//The Drawables can also be specified as a single object:\nnew AR.GeoObject(locations,\n&nbsp;&nbsp;{ ...\n&nbsp;&nbsp;&nbsp;&nbsp;drawables : { cam : drawable1}\n&nbsp;&nbsp;}\n);\n</pre>\nFor the render size of attached Drawables, see the chapter on <a href=\"./module_AR.html\">SDUs</a>.", "constructors": [{"params": [{"type": "Location|Array(Location)", "name": "location", "description": " Reference(s) to where this GeoObject is located."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>enabled</li>\n<li>renderingOrder</li>\n<li>onEnterFieldOfVision</li>\n<li>onExitFieldOfVision</li>\n<li>onClick</li>\n<li>drawables.cam</li>\n<li>drawables.radar</li>\n<li>drawables.indicator</li>\n</ul>"}], "description": "A GeoObject represents a virtual object bound to specific\nlocations in the earth's 3-dimensional space. Any GeoObject is\nlinked to at least one Location.<br/><br/>\nA GeoObject\n<ul>\n<li>must have at least one location and can never exist without at least one\nlocation.</li>\n<li>can have Drawables associated with it. These Drawables will represent\nthe GeoObject in the camera view.</li>\n<li>can have triggers associated with it. Triggers fire on certain events\nand execute functions to react on these actions.</li>\n</ul>\nOn creation, a reference to Locations must be passed to define where the\nGeoObject is located in the real world. <br/><br/> A GeoObject can either be\nenabled or disabled (see ARObject.enabled). Enabled means that the GeoObject\nwill be considered in the calculations to project its drawables onto the\ncamera screen, and its triggers will fire on the appropriate events. In case\nthe GeoObject is disabled, it will not be considered in the calculations, and\nit will not fire any triggers. <br/><br/>\nOn creation, setup parameters can be passed to customize the properties of\nthe GeoObject.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n// a GeoObject which is disabled per default\nvar geoObject1 = new AR.GeoObject(geoLocation1, {\n&nbsp;&nbsp;enabled : false\n});\n// now, we enable geoObject1 so it will is considered for projection.\ngeoObject1.enabled = true;\n<br/>\n// a GeoObject which reacts when the GeoObject becomes visible and invisible.\n// whenever it becomes visible, the altitude is increased by 1 meter\n// whenever it becomes invisible, the altitude decreases by 1 meter.\nvar geoObject2 = new AR.GeoObject(geoLocation1);\ngeoObject2.onEnterFieldOfVision = function() {\n&nbsp;&nbsp;geoObject2.locations[0].altitude++;\n};\ngeoObject2.onExitFieldOfVision = function() {\n&nbsp;&nbsp;geoObject2.locations[0].altitude--;\n};\n<br/>\n// a GeoObject which has two locations set\nvar geoObject3 = new AR.GeoObject( [ geoLocation1, geoLocation2 ], null);\n<br/>\n// a GeoObject with triggers and drawables set on creation date \nvar geoObject4 = new AR.GeoObject(locations, {\n&nbsp;&nbsp;//the function executed when the GeoObject enters the field of vision\n&nbsp;&nbsp;onEnterFieldOfVision : function(){ ... },\n&nbsp;&nbsp;//the function executed when the GeoObject exits the field of vision\n&nbsp;&nbsp;onExitFieldOfVision : function(){ ... },\n&nbsp;&nbsp;drawables : { cam :\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[drawable1, drawable2] //the drawables representing the GeoObject in the camera view\n&nbsp;&nbsp;}\n});\n<br/>\n//The Drawables can also be specified as a single object:\nnew AR.GeoObject(locations,\n&nbsp;&nbsp;{ ...\n&nbsp;&nbsp;&nbsp;&nbsp;drawables : { cam : drawable1}\n&nbsp;&nbsp;}\n);\n</pre>\nFor the render size of attached Drawables, see the chapter on <a href=\"./module_AR.html\">SDUs</a>."}], "namespace": "", "module": "AR", "guessedname": "GeoObject", "extends": "ARObject", "superclass": "ARObject", "file": "architect_generated.js", "guessedtype": "property", "shortname": "GeoObject", "properties": {"drawables.radar": {"type": "Array(Drawable2D)", "description": "The Drawable2Ds which will be used to represent the ARObject\nin the radar. The drawables will only show if AR.radar is\nenabled and initialized with valid values.<br/><br/> Drawables in the array will\nbe printed starting with the Drawable at position 0, causing\nDrawables at later indices to overlap the previously drawn\nDrawables.\n<br/><br/>\nIn the radar, 1 SDU is defined to be the radius of the radar. Thus,\nif a Circle with radius 1 SDU is created, the circle will\ntake up the entire space of the radar. \n<br/><br/> <div class=\"paragraph\">Remark:</div><br/>\nThe array content\nshould not be manipulated via the [] operator, as it cannot\nbe guaranteed that the changes will be propagated through to\nthe native application. The property should only be\nmanipulated with geoobject.drawables.addRadarDrawable() and\ngeoobject.drawables.removeRadarDrawable(), or directly set with\ngeoobject.drawables.radar = new Array(...);.\n<br/><br/> <div class=\"paragraph\">Remark:</div><br/>\nClicks on the Drawable2Ds (Drawable.onClick) in the radar will not be handled. Assigning\na function to the click trigger of Drawable2Ds in the radar is allowed, however,\nthey will not be triggered. Refer to AR.radar.onClick() for event\nhandling on radar clicks."}, "drawables.indicator": {"type": "Array(Drawable2D)", "description": "The Drawable2Ds which will be used to indicate the direction\nwhere the GeoObject is located, in case the GeoObject is currently\nnot visible on the screen.<br/><br/> Drawables in the array will\nbe printed starting with the Drawable at position 0, causing\nDrawables at later indices to overlap the previously drawn\nDrawables.\n<br/><br/>\nThe indicator Drawables will be rendered on the edge of the screen\nand will move around the screen edges as the user is moving the\nphone. For indicator Drawables, 1 SDU is defined to be the width of\nthe screen in landscape orientation. Thus, if an ImageDrawable with\nwidth 0.5 SDUs is created, it will take up half the width of the screen.\n<br/><br/>\nAs the indicator Drawables move around the edges of the screen, their x and\ny orientation changes. Thus, the following behavior is defined for\nany manipulation (offsetX, offsetY, rotation, scaling etc.) on the Drawable2D:\nThe manipulations are applied when the Drawable2D is located on the top\nedge of the screen, horizontally centered. A positive offsetY, for example, make\nthe Drawable move further away from the top screen edge. As the Drawable moves\naround the edges of the screen and is finally located on the left edge of the screen,\noffsetY will still cause the drawable to be drawn further away from the left\nedge of the screen. The offsetX setting behaves accordingly with left/right\nshifting of the Drawable.\n<br/><br/> <div class=\"paragraph\">Remark:</div><br/>\nThe array content\nshould not be manipulated via the [] operator, as it cannot\nbe guaranteed that the changes will be propagated through to\nthe native application. The property should only be\nmanipulated with geoobject.drawables.addIndicatorDrawable() and\ngeoobject.drawables.removeIndicatorDrawable(), or directly set with\ngeoobject.drawables.indicator = new Array(...);.\n<br/><br/> <div class=\"paragraph\">Remark:</div><br/>\nClicks on the indicator Drawable2Ds (Drawable.onClick) will not be handled. Assigning\na function to the click trigger of Drawable2Ds used as indicators is allowed, however,\nthey will not be triggered."}, "locations": {"type": "Array(Location)", "description": "The array of Locations of the GeoObject. When a\nsingle Location is set as location, it will\nimplicitly be transformed into an Array of\nLocations with only one entry. Thus, the\nfollowing four statements have the same effect:\n<pre class=\"prettyprint\">\ngeoObject = new AR.GeoObject(location);\ngeoObject.locations = location;\ngeoObject.locations = new Array(location);\ngeoObject.locations = [ location ];\n</pre>"}}, "name": "GeoObject"}, "ARObject": {"name": "ARObject", "namespace": "", "module": "AR", "guessedname": "ARObject", "methods": {"drawables.removeCamDrawable": {"params": [{"type": "Drawable|Array(Drawable)|int", "name": "drawable|position", "description": " When a single Drawable or an Array of\nDrawables is given, these Drawables will be removed from the\narray. When an integer is given, the Drawable at the specified\nposition will be removed."}], "description": "Removes Drawables from the ARObject in the cam.", "guessedname": "removeCamDrawable", "guessedtype": "function"}, "triggers.onExitFieldOfVision": {"deprecated": "Use onExitFieldOfVision instead."}, "triggers.onEnterFieldOfVision": {"deprecated": "Use onEnterFieldOfVision instead."}, "drawables.addCamDrawable": {"params": [{"type": "Drawable|Array(Drawable)", "name": "drawable", "description": " The drawable(s) that should be added to the camera. Can either be a\nsingle Drawable, or an Array of Drawables."}, {"type": "int", "name": "position", "description": " The position where the Drawable should be added in the array. If\nnot specified, the Drawable will be added at the end of the\narray."}], "description": "Adds Drawables to the ARObject in the camera.", "guessedname": "addCamDrawable", "guessedtype": "function"}, "onClick": {"return": {"type": "boolean", "description": "<ul>\n<li>false - The click-queue should not stop with this ARObject.\nThus, the next ARObject's onClick() function will be\nexecuted. This is the default value in case no return value is\nset or the function is not defined for this ARObject.</li>\n<li>true - The queue-execution will stop at the current\nARObject, underlying ARObjects will not receive\nonClick() calls.</li>\n</ul>"}, "description": "Will be executed when any of the ARObject's Drawables have been clicked,\nand none of the clicked Drawables's onClick() triggers (might also be referenced by another ARObject)\nhave been set to quit the click chain. ARObject.onClick() will be executed after any Drawable.onClick() triggers have\nbeen executed.<br/><br/>\nIn case multiple ARObjects are hit by the click, the order of the execution is defined by the distance\nof the ARObject to the user, with the closest ARObject's click trigger executed first.<br/><br/>\nThe return value of the\nfunction determines if, after the onClick()-Function was\nexecuted for this ARObject, the queue shall continue to execute\nonClick() for the next ARObject in the queue. In case the last\nARObject in the queue still requests to continue the click-queue,\ncontext.onScreenClick() will be executed."}, "isVisible": {"return": {"type": "boolean", "description": "Whether the ARObject is currently visible on\nthe screen (true) or invisble (false)."}, "description": "Returns the current visibility state of the\nARObject. An ARObject is defined visible when at\nleast one of the ARObject's locations (geolocations or visual tracker) is projected\nonto a screen coordinate which is currently visible\non the screen.", "guessedname": "isVisible", "guessedtype": "function"}, "onExitFieldOfVision": {"description": "Will be executed when the ARObject's visibility has changed\nfrom visible to invisible.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onExitFieldOfVision."}, "onEnterFieldOfVision": {"description": "The trigger will fire when the ARObject's visibility has\nchanged from invisible to visible.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onEnterFieldOfVision."}}, "extends": "ARchitectObject", "superclass": "ARchitectObject", "file": "architect_generated.js", "guessedtype": "property", "shortname": "ARObject", "properties": {"drawables.cam": {"type": "Array(Drawable)", "description": "The Drawables which will be used to represent the ARObject\nin the camera view. <br/><br/> Drawables in the array will\nbe printed starting with the Drawable at position 0, causing\nDrawables at later indices to overlap the previously drawn\nDrawables. <br/><br/> <div class=\"paragraph\">Remark:</div><br/>\nThe array content\nshould not be manipulated via the [] operator, as it cannot\nbe guaranteed that the changes will be propagated through to\nthe native application. The property should only be\nmanipulated with arobject.drawables.addCamDrawable() and\narobject.drawables.removeCamDrawable(), or directly set with\narobject.drawables.cam = new Array(...);."}, "enabled": {"default": "true", "type": "boolean", "description": "A boolean flag to enable or disable the ARObject."}, "renderingOrder": {"default": "0", "type": "int", "description": "Drawables of different ARObjects might overlap. In this case, renderingOrder defines the rendering order of the Drawables of the ARObject.\nARObjects with higher renderingOrder values cause their Drawables to be drawn on top of the Drawables of ARObjects with lower renderingOrder values.\nIn case two ARObjects have set the same renderingOrder, the Drawables are rendered based on the distance, causing objects closer to the user to\noverlap objects further away.  \n<br/>For example, If you want to bring Drawables of a certain ARObject to the very front, set the renderingOrder value of the corresponding ARObject\nto a very high value.\n<br/><br/>For the printing order of Drawables within the same ARObject, refer to Drawable2D.zOrder."}}, "description": "An ARObject is an abstract class which must not be instantiated directly.\nIt provides basic methods and properties required for the objects rendered in the AR scene.<br/><br/>\nARObjects are somehow registered in the real world, either with geo coordinates (GeoObject) or with\nvisual trackable objects (Trackable2DObject). They also have Drawables attached to it, which are used\nto represent the ARObject on the screen."}, "ARchitectObject": {"name": "ARchitectObject", "namespace": "", "module": "AR", "guessedname": "ARchitectObject", "methods": {"destroy": {"description": "Destroys the object.", "guessedname": "destroy", "guessedtype": "function"}}, "file": "architect_generated.js", "guessedtype": "property", "shortname": "ARchitectObject", "properties": {"destroyed": {"type": "boolean", "description": "Indicates if the object has already been destroyed."}}, "description": "ARchitectObject is the base class for each object created\nthrough the ARchitect.<br/><br/>\nWhenever an object is created, the developer needs to make sure it is\nproperly released to free the memory occupied by the object.<br/><br/>\nTo free the memory, an object's destroy() method needs to be called.\nThis will undefine all properties of the object and will unlink it from\nthe AR scene. A once destroyed object can never again be viewed in the AR\nscene.<br/><br/>\nDestruction of an object will cause three things:\n<ul>\n<li>All properties (except the <i>destroyed</i> property) and methods of\nthe object will be deleted (undefined).</li>\n<li>The <i>destroyed</i> property will be set to true.</li>\n<li>The object will be removed from the AR scene.</li>\n</ul>\nAn ARchitectObject is a superclass for other classes and must not be directly\ninstantiated by the developer."}, "AnimationGroup": {"name": "AnimationGroup", "constructors": [{"params": [{"type": "string", "name": "type", "description": " The type of AnimationGroup. Must either be \"parallel\" or \"sequential\".\nUse of the values defined in AR.CONST.ANIMATION_GROUP_TYPE is suggested."}, {"type": "Array(Animation)", "name": "animations", "description": " The array of animations."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>onStart</li>\n<li>onFinish</li>\n</ul>"}], "description": "An AnimationGroup allows to run a group of Animations sequentially or in parallel.<br/><br/>\nAn AnimationGroup consists of an array of Animations that form the AnimationGroup.\nA parallel AnimationGroup runs all contained Animations in parallel, starting at the same time.\nA sequential AnimationGroup runs all contained Animations sequentially, starting with the first Animation in the array.\nThe length of the AnimationGroup will be defined as\n<ul>\n<li>the maximum length of the contained Animations in case of a parallel AnimationGroup</li>\n<li>the sum of all lengths of the contained Animations in case of a sequential AnimationGroup</li>\n</ul> \n<br/><br/> \n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//We want to animate two GeoLocations to move 100 meters up in altitude at the same time\n// over a period of 10 seconds to simulate an elevator\nvar elevatorAnimation1 = new AR.PropertyAnimation(\n&nbsp;&nbsp;geoLocation1, //the object geoLocation1 holds the animated property\n&nbsp;&nbsp;&quot;altitude&quot;, //the property altitude will be animated\n&nbsp;&nbsp;500, //the start value of the animation is 500 meters\n&nbsp;&nbsp;600, //the resulting value of the animation is 600 meters\n&nbsp;&nbsp;10000, //the duration of the elevator climb is 10 seconds (10000 miliseconds)\n&nbsp;&nbsp;{type: AR.CONST.EASING_CURVE_TYPE.EASE_IN_OUT_QUAD}, //easing curve to simulate acceleration and deceleration\n);\nvar elevatorAnimation2 = new AR.PropertyAnimation(\n&nbsp;&nbsp;geoLocation2, //the object geoLocation2 holds the animated property\n&nbsp;&nbsp;&quot;altitude&quot;, //the property altitude will be animated\n&nbsp;&nbsp;500, //the start value of the animation is 500 meters\n&nbsp;&nbsp;600, //the resulting value of the animation is 600 meters\n&nbsp;&nbsp;10000, //the duration of the elevator climb is 10 seconds (10000 miliseconds)\n&nbsp;&nbsp;{type: AR.CONST.EASING_CURVE_TYPE.EASE_IN_OUT_QUAD}, //easing curve to simulate acceleration and deceleration\n);\nvar animationGroup = new AR.AnimationGroup(\n&nbsp;&nbsp;AR.CONST.ANIMATION_GROUP_TYPE.PARALLEL, // the animations will run in parallel\n&nbsp;&nbsp;[elevatorAnimation1, elevatorAnimation2], // the animations in the AnimationGroup\n&nbsp;&nbsp;{onFinish : beepSound.play} //when finished, play a beep sound that elevators have reached their positions\n);\n// now, start the animation group\nanimationGroup.start();\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "AnimationGroup", "extends": "Animation", "superclass": "Animation", "file": "architect_generated.js", "guessedtype": "property", "shortname": "AnimationGroup", "description": "An AnimationGroup allows to run a group of Animations sequentially or in parallel.<br/><br/>\nAn AnimationGroup consists of an array of Animations that form the AnimationGroup.\nA parallel AnimationGroup runs all contained Animations in parallel, starting at the same time.\nA sequential AnimationGroup runs all contained Animations sequentially, starting with the first Animation in the array.\nThe length of the AnimationGroup will be defined as\n<ul>\n<li>the maximum length of the contained Animations in case of a parallel AnimationGroup</li>\n<li>the sum of all lengths of the contained Animations in case of a sequential AnimationGroup</li>\n</ul> \n<br/><br/> \n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//We want to animate two GeoLocations to move 100 meters up in altitude at the same time\n// over a period of 10 seconds to simulate an elevator\nvar elevatorAnimation1 = new AR.PropertyAnimation(\n&nbsp;&nbsp;geoLocation1, //the object geoLocation1 holds the animated property\n&nbsp;&nbsp;&quot;altitude&quot;, //the property altitude will be animated\n&nbsp;&nbsp;500, //the start value of the animation is 500 meters\n&nbsp;&nbsp;600, //the resulting value of the animation is 600 meters\n&nbsp;&nbsp;10000, //the duration of the elevator climb is 10 seconds (10000 miliseconds)\n&nbsp;&nbsp;{type: AR.CONST.EASING_CURVE_TYPE.EASE_IN_OUT_QUAD}, //easing curve to simulate acceleration and deceleration\n);\nvar elevatorAnimation2 = new AR.PropertyAnimation(\n&nbsp;&nbsp;geoLocation2, //the object geoLocation2 holds the animated property\n&nbsp;&nbsp;&quot;altitude&quot;, //the property altitude will be animated\n&nbsp;&nbsp;500, //the start value of the animation is 500 meters\n&nbsp;&nbsp;600, //the resulting value of the animation is 600 meters\n&nbsp;&nbsp;10000, //the duration of the elevator climb is 10 seconds (10000 miliseconds)\n&nbsp;&nbsp;{type: AR.CONST.EASING_CURVE_TYPE.EASE_IN_OUT_QUAD}, //easing curve to simulate acceleration and deceleration\n);\nvar animationGroup = new AR.AnimationGroup(\n&nbsp;&nbsp;AR.CONST.ANIMATION_GROUP_TYPE.PARALLEL, // the animations will run in parallel\n&nbsp;&nbsp;[elevatorAnimation1, elevatorAnimation2], // the animations in the AnimationGroup\n&nbsp;&nbsp;{onFinish : beepSound.play} //when finished, play a beep sound that elevators have reached their positions\n);\n// now, start the animation group\nanimationGroup.start();\n</pre>"}, "ModelAnimation": {"name": "ModelAnimation", "constructors": [{"params": [{"type": "Model", "name": "model", "description": " The model that holds the animation."}, {"type": "string", "name": "animationId", "description": " The ID the animation is referenced with inside the model."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>onStart</li>\n<li>onFinish</li>\n<li>duration</li>\n</ul>"}], "description": "ModelAnimations allow the control of animations defined in a Model.<br/><br/> \n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//We want to start an animation inside a model\nvar model = new AR.Model(&quot;http://myServer.com/myModel.zip&quot;);\nvar modelAnim = new AR.ModelAnimation(model, &quot;hit&quot;); //start hit-animation defined inside model\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "ModelAnimation", "extends": "Animation", "superclass": "Animation", "file": "architect_generated.js", "guessedtype": "property", "shortname": "ModelAnimation", "description": "ModelAnimations allow the control of animations defined in a Model.<br/><br/> \n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//We want to start an animation inside a model\nvar model = new AR.Model(&quot;http://myServer.com/myModel.zip&quot;);\nvar modelAnim = new AR.ModelAnimation(model, &quot;hit&quot;); //start hit-animation defined inside model\n</pre>"}, "RelativeLocation": {"name": "RelativeLocation", "default": "0", "constructors": [{"params": [{"type": "Location", "name": "location", "description": " The location which is used as the reference point. If null is passed, the current position of the\nuser is used as a reference point."}, {"type": "float", "name": "northing", "description": " Specifies the number of meters the relative location is further north than the referenced location.\nA negative value specifies the number of meters south."}, {"type": "float", "name": "easting", "description": " Specifies the number of meters the relative location is further east than the referenced location.\nA negative value specifies the number of meters west."}, {"type": "float", "name": "altitudeDelta", "description": " optional. Specifies the number of meters the relative location is higher (positive) or lower (negative)\nthan the referenced location. This is also applied when the altitude of the referenced location is unknown,\ncausing the relative location to definitely appear higher or lower then the referenced location."}], "description": "A relative location describes a location that is relative to either\nanother Location, or the location of the user.<br/><br/>\nIt is specified using the northing and easting of the location in relation to\nthe referenced location. An optional altitudeDelta can also be applied.\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//a relative location being 12 meters south, 20 meters west and 13 meters lower than current position of the user\nvar location2 = new AR.RelativeLocation(null, -12, -20, -13);\nvar geoLoc = new AR.GeoLocation(47.77317, 13.069929, 320.);\n//a relative location being 12 meters north, 20 meters east and 13 meters higher than geoLoc\nvar location1 = new AR.RelativeLocation(geoLoc, 12, 20, 13);\n</pre>\nRelative locations move with their referenced locations."}], "namespace": "", "module": "AR", "guessedname": "RelativeLocation", "extends": "Location", "superclass": "Location", "file": "architect_generated.js", "guessedtype": "property", "shortname": "RelativeLocation", "properties": {"altitudeDelta": {"type": "float", "description": "Specifies the number of meters the relative location is higher (positive) or lower (negative)\nthan the referenced location. This is also applied when the altitude of the referenced location is unknown,\ncausing the relative location to definitely appear higher or lower then the referenced location.\nIf the property is set to null, 0 will be applied as the altitudeDelta."}, "location": {"type": "Location", "description": "The location which is used as the reference point. If null is passed, the current position of the\nuser is used as a reference point."}, "easting": {"type": "float", "description": "Specifies the number of meters the relative location is further east than the referenced location.\nA negative value specifies the number of meters west."}, "northing": {"type": "float", "description": "Specifies the number of meters the relative location is further north than the referenced location.\nA negative value specifies the number of meters south."}}, "description": "A relative location describes a location that is relative to either\nanother Location, or the location of the user.<br/><br/>\nIt is specified using the northing and easting of the location in relation to\nthe referenced location. An optional altitudeDelta can also be applied.\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//a relative location being 12 meters south, 20 meters west and 13 meters lower than current position of the user\nvar location2 = new AR.RelativeLocation(null, -12, -20, -13);\nvar geoLoc = new AR.GeoLocation(47.77317, 13.069929, 320.);\n//a relative location being 12 meters north, 20 meters east and 13 meters higher than geoLoc\nvar location1 = new AR.RelativeLocation(geoLoc, 12, 20, 13);\n</pre>\nRelative locations move with their referenced locations."}, "BoundingRectangle": {"name": "BoundingRectangle", "namespace": "", "module": "AR", "guessedname": "BoundingRectangle", "methods": {"getWidth": {"return": {"type": "float", "description": "The width of the BoundingRectangle in SDUs."}, "description": "Returns the width of the Drawable2D, in <a href=\"./module_AR.html\">SDUs</a>, after\napplying translations on the Drawable2D. <br/><br/>\n<div class=\"paragraph\">Important:</div> getWidth() does\nnot deliver the actual width of the Drawable2D on the\nscreen.", "guessedname": "getWidth", "guessedtype": "function"}, "getHeight": {"return": {"type": "float", "description": "The height of the BoundingRectangle in SDUs."}, "description": "Returns the height of the Drawable2D, in <a href=\"./module_AR.html\">SDUs</a>, after\napplying translations on the Drawable2D. <br/><br/>\n<div class=\"paragraph\">Important:</div> getHeight()\ndoes not deliver the actual height of the Drawable2D on\nthe screen.", "guessedname": "getHeight", "guessedtype": "function"}}, "file": "architect_generated.js", "guessedtype": "property", "shortname": "BoundingRectangle", "description": "A BoundingRectangle delivers information on the size of a\nDrawable2D on the screen. <br/><br/>\nThe Bounding Rectangle of a Drawable2D is defined as follows:\n<ul>\n<li>The Bounding Rectangle has it's edges parallel to the screen's edges.</li>\n<li>The Bounding Rectangle fully contains the Drawable2D</li>\n<li>The Bounding Rectangle of the Drawable2D is the smallest rectangle\ncontaining the Drawable2D.</li>\n</ul>\nBoundingRectangle must not be directly instantiated by the developer."}, "PropertyAnimation": {"name": "PropertyAnimation", "constructors": [{"params": [{"type": "ARchitectObject", "name": "target", "description": " The object which holds the property that will be animated. Must be an ARchitectObject."}, {"type": "string", "name": "property", "description": " The object's property name that will be animated."}, {"type": "int|float", "name": "start", "description": " The value the PropertyAnimation will start with. If null,\nthe current value of the property will be used. <b>Remark:</b> In case null is set as start value, and the PropertyAnimation loops more than once, the PropertyAnimation will not reset the value after it has completed the first run, and the value won't change in the following runs. To reset the value after each run, supply the property's current value as start value."}, {"type": "int|float", "name": "end", "description": " The value the PropertyAnimation will end with. The value must\nbe non-null."}, {"type": "int", "name": "duration", "description": " The duration of the PropertyAnimation, in milliseconds.\nThe value must be non-negative."}, {"type": "EasingCurve", "name": "easingCurve", "description": " an easing curve describing the nature of the\nanimation (see description above for details). If the easingCurve\nparameter is omitted, set to null or undefined or does not contain\na type property, the easingCurve parameter will default to a linear\neasing curve."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>onStart</li>\n<li>onFinish</li>\n</ul>"}], "description": "Property Animations allow constant changes to a numeric\nvalue/property of an object, dependent on start-value, end-value\nand the duration of the animation. <br/><br/> Animations can be\nseen as functions defining the progress of the change on the\nvalue. The Animation can be parametrized via easing curves.<br/><br/> \n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//We want to animate a GeoLocation to move 100 meters up in altitude\n// over a period of 10 seconds to simulate an elevator\nvar elevatorAnimation = new AR.PropertyAnimation(\n&nbsp;&nbsp;geoLocation1, //the object geoLocation1 holds the animated property\n&nbsp;&nbsp;&quot;altitude&quot;, //the property altitude will be animated\n&nbsp;&nbsp;500, //the start value of the animation is 500 meters\n&nbsp;&nbsp;600, //the resulting value of the animation is 600 meters\n&nbsp;&nbsp;10000, //the duration of the elevator climb is 10 seconds (10000 miliseconds)\n&nbsp;&nbsp;{type: AR.CONST.EASING_CURVE_TYPE.EASE_IN_OUT_QUAD}, //easing curve to simulate acceleration and deceleration\n&nbsp;&nbsp;{onFinish : beepSound.play} //when finished, play a beep sound that elevator doors will now open\n);\n</pre>\nEasing Curves describe in which way a PropertyAnimation will\nchange the animated property's value from the start- to the\nend-value. A good description of various Easing Curves,\nincluding the ones supported by the Wikitude ARchitect, is\ndescribed <a href=\"http://doc.qt.nokia.com/solutions/4/\nqtanimationframework/qteasingcurve.html\">here</a>.<br/><br/>\nThe following Easing Curve types are defined (see\nAR.CONST.EASING_CURVE_TYPE):<br/><br/>\n<table>\n<tr><td><b>Constant<b></td><td><b>String Representation</b></td></tr>\n<tr><td>LINEAR</td><td>linear</td></tr>\n<tr><td>EASE_IN_QUAD</td><td>easeInQuad</td></tr>\n<tr><td>EASE_OUT_QUAD</td><td>easeOutQuad</td></tr>\n<tr><td>EASE_IN_OUT_QUAD</td><td>easeInOutQuad</td></tr>\n<tr><td>EASE_OUT_IN_QUAD</td><td>easeOutInQuad</td></tr>\n<tr><td>EASE_IN_CUBIC</td><td>easeInCubic</td></tr>\n<tr><td>EASE_OUT_CUBIC</td><td>easeOutCubic</td></tr>\n<tr><td>EASE_IN_OUT_CUBIC</td><td>easeInOutCubic</td></tr>\n<tr><td>EASE_OUT_IN_CUBIC</td><td>easeOutInCubic</td></tr>\n<tr><td>EASE_IN_QUAT</td><td>easeInQuat</td></tr>\n<tr><td>EASE_OUT_QUAT</td><td>easeOutQuat</td></tr>\n<tr><td>EASE_IN_OUT_QUAT</td><td>easeInOutQuat</td></tr>\n<tr><td>EASE_OUT_IN_QUAT</td><td>easeOutInQuat</td></tr>\n<tr><td>EASE_IN_QUINT</td><td>easeInQuint</td></tr>\n<tr><td>EASE_OUT_QUINT</td><td>easeOutQuint</td></tr>\n<tr><td>EASE_IN_OUT_QUINT</td><td>easeInOutQuint</td></tr>\n<tr><td>EASE_OUT_IN_QUINT</td><td>easeOutInQuint</td></tr>\n<tr><td>EASE_IN_ELASTIC</td><td>easeInElastic</td></tr>\n<tr><td>EASE_OUT_ELASTIC</td><td>easeOutElastic</td></tr>\n<tr><td>EASE_IN_OUT_ELASTIC</td><td>easeInOutElastic</td></tr>\n<tr><td>EASE_OUT_IN_ELASTIC</td><td>easeOutInElastic</td></tr>\n<tr><td>EASE_IN_BACK</td><td>easeInBack</td></tr>\n<tr><td>EASE_OUT_BACK</td><td>easeOutBack</td></tr>\n<tr><td>EASE_IN_OUT_BACK</td><td>easeInOutBack</td></tr>\n<tr><td>EASE_OUT_IN_BACK</td><td>easeOutInBack</td></tr>\n<tr><td>EASE_IN_SINE</td><td>easeInSine</td></tr>\n<tr><td>EASE_OUT_SINE</td><td>easeOutSine</td></tr>\n<tr><td>EASE_IN_OUT_SINE</td><td>easeInOutSine</td></tr>\n<tr><td>EASE_OUT_IN_SINE</td><td>easeOutInSine</td></tr>\n<tr><td>EASE_IN_EXPO</td><td>easeInExpo</td></tr>\n<tr><td>EASE_OUT_EXPO</td><td>easeOutExpo</td></tr>\n<tr><td>EASE_IN_OUT_EXPO</td><td>easeInOutExpo</td></tr>\n<tr><td>EASE_OUT_IN_EXPO</td><td>easeOutInExpo</td></tr>\n<tr><td>EASE_IN_CIRC</td><td>easeInCirc</td></tr>\n<tr><td>EASE_OUT_CIRC</td><td>easeOutCirc</td></tr>\n<tr><td>EASE_IN_OUT_CIRC</td><td>easeInOutCirc</td></tr>\n<tr><td>EASE_OUT_IN_CIRC</td><td>easeOutInCirc</td></tr>\n<tr><td>EASE_IN_BOUNCE</td><td>easeInBounce</td></tr>\n<tr><td>EASE_OUT_BOUNCE</td><td>easeOutBounce</td></tr>\n<tr><td>EASE_IN_OUT_BOUNCE</td><td>easeInOutBounce</td></tr>\n<tr><td>EASE_OUT_IN_BOUNCE</td><td>easeOutInBounce</td></tr>\n<tr><td>EASE_IN_CURVE</td><td>easeInCurve</td></tr>\n<tr><td>EASE_OUT_CURVE</td><td>easeOutCurve</td></tr>\n<tr><td>EASE_SIN_CURVE</td><td>easeSinCurve</td></tr>\n<tr><td>EASE_COS_CURVE</td><td>easeCosineCurve</td></tr>\n</table><br/>\nCertain Easing Curves can be parametrized with additional values, such as\namplitude, period and overshoot.<br/><b>Amplitude</b> is valid for\nall easing curves with the type description ending on ELASTIC or BOUNCE (like\nEASE_IN_ELASTIC or EASE_IN_BOUNCE), and will be ignored for all others.<br/><b>Overshoot</b> is valid\nfor all easing curves with the type description ending on BACK (like\nEASE_IN_BACK), and will be ignored for all others.<br/><b>Period</b> is valid\nfor all easing curves with the type description ending on BOUNCE (like\nEASE_IN_BOUNCE), and will be ignored for all others.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar easingCurve = {\n&nbsp;&nbsp;type : AR.CONST.EASING_CURVE_TYPE.EASE_IN_BACK,\n&nbsp;&nbsp;overshoot : 1.70158 //results in a 10% overshoot\n};\n</pre>\nThe same Easing Curve can be instanziated by writing\n<pre class=\"prettyprint\">\nvar easingCurve = {\n&nbsp;&nbsp;type : \"easeInBack\",\n&nbsp;&nbsp;overshoot : 1.70158 //results in a 10% overshoot\n};\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "PropertyAnimation", "extends": "Animation", "superclass": "Animation", "file": "architect_generated.js", "guessedtype": "property", "shortname": "PropertyAnimation", "description": "Property Animations allow constant changes to a numeric\nvalue/property of an object, dependent on start-value, end-value\nand the duration of the animation. <br/><br/> Animations can be\nseen as functions defining the progress of the change on the\nvalue. The Animation can be parametrized via easing curves.<br/><br/> \n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//We want to animate a GeoLocation to move 100 meters up in altitude\n// over a period of 10 seconds to simulate an elevator\nvar elevatorAnimation = new AR.PropertyAnimation(\n&nbsp;&nbsp;geoLocation1, //the object geoLocation1 holds the animated property\n&nbsp;&nbsp;&quot;altitude&quot;, //the property altitude will be animated\n&nbsp;&nbsp;500, //the start value of the animation is 500 meters\n&nbsp;&nbsp;600, //the resulting value of the animation is 600 meters\n&nbsp;&nbsp;10000, //the duration of the elevator climb is 10 seconds (10000 miliseconds)\n&nbsp;&nbsp;{type: AR.CONST.EASING_CURVE_TYPE.EASE_IN_OUT_QUAD}, //easing curve to simulate acceleration and deceleration\n&nbsp;&nbsp;{onFinish : beepSound.play} //when finished, play a beep sound that elevator doors will now open\n);\n</pre>\nEasing Curves describe in which way a PropertyAnimation will\nchange the animated property's value from the start- to the\nend-value. A good description of various Easing Curves,\nincluding the ones supported by the Wikitude ARchitect, is\ndescribed <a href=\"http://doc.qt.nokia.com/solutions/4/\nqtanimationframework/qteasingcurve.html\">here</a>.<br/><br/>\nThe following Easing Curve types are defined (see\nAR.CONST.EASING_CURVE_TYPE):<br/><br/>\n<table>\n<tr><td><b>Constant<b></td><td><b>String Representation</b></td></tr>\n<tr><td>LINEAR</td><td>linear</td></tr>\n<tr><td>EASE_IN_QUAD</td><td>easeInQuad</td></tr>\n<tr><td>EASE_OUT_QUAD</td><td>easeOutQuad</td></tr>\n<tr><td>EASE_IN_OUT_QUAD</td><td>easeInOutQuad</td></tr>\n<tr><td>EASE_OUT_IN_QUAD</td><td>easeOutInQuad</td></tr>\n<tr><td>EASE_IN_CUBIC</td><td>easeInCubic</td></tr>\n<tr><td>EASE_OUT_CUBIC</td><td>easeOutCubic</td></tr>\n<tr><td>EASE_IN_OUT_CUBIC</td><td>easeInOutCubic</td></tr>\n<tr><td>EASE_OUT_IN_CUBIC</td><td>easeOutInCubic</td></tr>\n<tr><td>EASE_IN_QUAT</td><td>easeInQuat</td></tr>\n<tr><td>EASE_OUT_QUAT</td><td>easeOutQuat</td></tr>\n<tr><td>EASE_IN_OUT_QUAT</td><td>easeInOutQuat</td></tr>\n<tr><td>EASE_OUT_IN_QUAT</td><td>easeOutInQuat</td></tr>\n<tr><td>EASE_IN_QUINT</td><td>easeInQuint</td></tr>\n<tr><td>EASE_OUT_QUINT</td><td>easeOutQuint</td></tr>\n<tr><td>EASE_IN_OUT_QUINT</td><td>easeInOutQuint</td></tr>\n<tr><td>EASE_OUT_IN_QUINT</td><td>easeOutInQuint</td></tr>\n<tr><td>EASE_IN_ELASTIC</td><td>easeInElastic</td></tr>\n<tr><td>EASE_OUT_ELASTIC</td><td>easeOutElastic</td></tr>\n<tr><td>EASE_IN_OUT_ELASTIC</td><td>easeInOutElastic</td></tr>\n<tr><td>EASE_OUT_IN_ELASTIC</td><td>easeOutInElastic</td></tr>\n<tr><td>EASE_IN_BACK</td><td>easeInBack</td></tr>\n<tr><td>EASE_OUT_BACK</td><td>easeOutBack</td></tr>\n<tr><td>EASE_IN_OUT_BACK</td><td>easeInOutBack</td></tr>\n<tr><td>EASE_OUT_IN_BACK</td><td>easeOutInBack</td></tr>\n<tr><td>EASE_IN_SINE</td><td>easeInSine</td></tr>\n<tr><td>EASE_OUT_SINE</td><td>easeOutSine</td></tr>\n<tr><td>EASE_IN_OUT_SINE</td><td>easeInOutSine</td></tr>\n<tr><td>EASE_OUT_IN_SINE</td><td>easeOutInSine</td></tr>\n<tr><td>EASE_IN_EXPO</td><td>easeInExpo</td></tr>\n<tr><td>EASE_OUT_EXPO</td><td>easeOutExpo</td></tr>\n<tr><td>EASE_IN_OUT_EXPO</td><td>easeInOutExpo</td></tr>\n<tr><td>EASE_OUT_IN_EXPO</td><td>easeOutInExpo</td></tr>\n<tr><td>EASE_IN_CIRC</td><td>easeInCirc</td></tr>\n<tr><td>EASE_OUT_CIRC</td><td>easeOutCirc</td></tr>\n<tr><td>EASE_IN_OUT_CIRC</td><td>easeInOutCirc</td></tr>\n<tr><td>EASE_OUT_IN_CIRC</td><td>easeOutInCirc</td></tr>\n<tr><td>EASE_IN_BOUNCE</td><td>easeInBounce</td></tr>\n<tr><td>EASE_OUT_BOUNCE</td><td>easeOutBounce</td></tr>\n<tr><td>EASE_IN_OUT_BOUNCE</td><td>easeInOutBounce</td></tr>\n<tr><td>EASE_OUT_IN_BOUNCE</td><td>easeOutInBounce</td></tr>\n<tr><td>EASE_IN_CURVE</td><td>easeInCurve</td></tr>\n<tr><td>EASE_OUT_CURVE</td><td>easeOutCurve</td></tr>\n<tr><td>EASE_SIN_CURVE</td><td>easeSinCurve</td></tr>\n<tr><td>EASE_COS_CURVE</td><td>easeCosineCurve</td></tr>\n</table><br/>\nCertain Easing Curves can be parametrized with additional values, such as\namplitude, period and overshoot.<br/><b>Amplitude</b> is valid for\nall easing curves with the type description ending on ELASTIC or BOUNCE (like\nEASE_IN_ELASTIC or EASE_IN_BOUNCE), and will be ignored for all others.<br/><b>Overshoot</b> is valid\nfor all easing curves with the type description ending on BACK (like\nEASE_IN_BACK), and will be ignored for all others.<br/><b>Period</b> is valid\nfor all easing curves with the type description ending on BOUNCE (like\nEASE_IN_BOUNCE), and will be ignored for all others.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar easingCurve = {\n&nbsp;&nbsp;type : AR.CONST.EASING_CURVE_TYPE.EASE_IN_BACK,\n&nbsp;&nbsp;overshoot : 1.70158 //results in a 10% overshoot\n};\n</pre>\nThe same Easing Curve can be instanziated by writing\n<pre class=\"prettyprint\">\nvar easingCurve = {\n&nbsp;&nbsp;type : \"easeInBack\",\n&nbsp;&nbsp;overshoot : 1.70158 //results in a 10% overshoot\n};\n</pre>"}, "Sound": {"name": "Sound", "constructors": [{"params": [{"type": "string", "name": "uri", "description": " The uri to the audio file."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>onLoaded</li>\n<li>onFinishedPlaying</li>\n<li>onError</li>\n</ul>"}], "description": "An instance of this class represents a sound file, specified by\na URI.<br/><br/>\nAn instance of Sound traverses through various states during its lifetime,\nwhich are defined in AR.CONST.STATE. At each point in time, a Sound instance\nhas exactly one of the following states:\n<ul>\n<li>INITIALIZED</li>\n<li>LOADING</li>\n<li>LOADED</li>\n<li>PLAYING</li>\n<li>PAUSED</li>\n<li>ERROR</li>\n</ul>\nThe typical state transitions during the lifecycle of a Sound instance is as\nfollows:\n<ul>\n<li>Creation of the object with new AR.Sound(...) -> INITIALIZE</li>\n<li>sound.load() -> LOADING</li>\n<li>Loading finished -> LOADED</li>\n<li>Start playing -> PLAYING</li>\n<li>Pause playing -> PAUSED</li>\n<li>Resume playing -> PLAYING</li>\n<li>Playing finished -> LOADED</li>\n<li>Call sound.destroy() -> Object destroyed</li>\n</ul>\nOn important state changes, a trigger (onLoaded(), onFinishedPlaying(),\nonError()) will be called by the system. A developer can react on these\nevents by providing custom logic to these triggers. In case no custom logic is\napplied to a trigger, the trigger will not fire. The triggers can be\npassed on creation time, or added later.<br/><br/>\nIn case no preloading should be performed, a Sound file can also be played\nright after it has been initialized. The Sound file will then be streamed and\nnot stored on the device. Keep in mind that this might cause a delay in\nplaying the file, as it has to be loaded first.\nPlease note that the state will not change to either LOADING, LOADED, PLAYING or PAUSED,\nit will remain in INITIALIZED state as it is streamed onto the phone. Still,\nthe triggers will fire.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar sound = new AR.Sound(&quot;http://www.myuri.com/sound.mp3&quot;, {\n&nbsp;&nbsp;onLoaded : function(){sound.play();},\n&nbsp;&nbsp;onError : function(){\n&nbsp;&nbsp;&nbsp;&nbsp;// alert the user that the sound file could not be loaded\n&nbsp;&nbsp;&nbsp;&nbsp;},\n});\nsound.onFinishedPlaying = function(){alert(&quot;Playing finished&quot;);};\n</pre>\nNote that reloading the content is not possible - calling sound.load() while\nthe sound file is in a state different from INITIALIZED does not have any\neffect. <br/><br/>\nExecuting sound.play() while the file is in a state different from LOADED, PAUSED or\nINITIALIZED will have no effect.<br/><br/>\nWhen a Sound file in LOADED state is no longer needed, it is essential to\ncall destroy() to clean up ressources on the device.<br/><br/>\nWhen a Sound file has been paused, there are two ways to resume playing: Calling\nresume() will continue playing at the time the file was paused. Calling play() will start\nplaying the file from the very beginning. If a Sound file is initialized, and resume() is\ncalled, it will have the same effect as play(1).<br/><br/>\nThe ERROR state indicates that a problem was detected either while loading or\nplaying the file."}], "namespace": "", "module": "AR", "guessedname": "Sound", "methods": {"load": {"description": "Initiate the loading process of the sound file. The loaded\nfile will be stored on the device for immediate playing (and\nthus will use system ressources). It is good practice to\ndestroy (sound.destroy()) the sound files when they are no\nlonger needed (for example in context.onExit()).", "guessedname": "load", "guessedtype": "function"}, "play": {"params": [{"type": "int", "name": "loopTimes", "description": " Defines how often the sound file should be played in a row.\nA negative value indicates an infinite looping.<br/>\nThe parameter is optional and defaults to 1."}], "description": "Plays the sound file.", "guessedname": "play", "guessedtype": "function"}, "pause": {"description": "Pauses playing this sound file. To resume from the time the file was\npaused, call resume(). If play() is called on a paused file, the play will start\nfrom the very beginning.", "guessedname": "pause", "guessedtype": "function"}, "resume": {"description": "Allows a paused sound file to resume playing from the time the file was paused.\nIn any other cases, resume() has the same effect as calling play(1).", "guessedname": "resume", "guessedtype": "function"}, "onError": {"description": "The trigger will fire when the Sound file changed its state to\nERROR.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onError."}, "stop": {"description": "Stops playing this sound file. If play() was called multiple\ntimes on the same file, stop() will stop every running playback\nof this file. onFinishedPlaying() will not be triggered after\nstop() has been called.", "guessedname": "stop", "guessedtype": "function"}, "onFinishedPlaying": {"description": "The trigger will fire when the Sound file changed its state from\nPLAYING to either LOADED or INITIALIZED.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onFinishedPlaying."}, "onLoaded": {"description": "The trigger will fire when the Sound file changed its state from\nLOADING to LOADED.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onLoaded."}}, "extends": "ARchitectObject", "superclass": "ARchitectObject", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Sound", "properties": {"state": {"type": "int", "description": "The state the Sound object is currently in. The property\nis read-only and will be modified by the system. Custom\nmodifications will result in an exception. Valid values\nare defined in AR.CONST.STATE"}}, "description": "An instance of this class represents a sound file, specified by\na URI.<br/><br/>\nAn instance of Sound traverses through various states during its lifetime,\nwhich are defined in AR.CONST.STATE. At each point in time, a Sound instance\nhas exactly one of the following states:\n<ul>\n<li>INITIALIZED</li>\n<li>LOADING</li>\n<li>LOADED</li>\n<li>PLAYING</li>\n<li>PAUSED</li>\n<li>ERROR</li>\n</ul>\nThe typical state transitions during the lifecycle of a Sound instance is as\nfollows:\n<ul>\n<li>Creation of the object with new AR.Sound(...) -> INITIALIZE</li>\n<li>sound.load() -> LOADING</li>\n<li>Loading finished -> LOADED</li>\n<li>Start playing -> PLAYING</li>\n<li>Pause playing -> PAUSED</li>\n<li>Resume playing -> PLAYING</li>\n<li>Playing finished -> LOADED</li>\n<li>Call sound.destroy() -> Object destroyed</li>\n</ul>\nOn important state changes, a trigger (onLoaded(), onFinishedPlaying(),\nonError()) will be called by the system. A developer can react on these\nevents by providing custom logic to these triggers. In case no custom logic is\napplied to a trigger, the trigger will not fire. The triggers can be\npassed on creation time, or added later.<br/><br/>\nIn case no preloading should be performed, a Sound file can also be played\nright after it has been initialized. The Sound file will then be streamed and\nnot stored on the device. Keep in mind that this might cause a delay in\nplaying the file, as it has to be loaded first.\nPlease note that the state will not change to either LOADING, LOADED, PLAYING or PAUSED,\nit will remain in INITIALIZED state as it is streamed onto the phone. Still,\nthe triggers will fire.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar sound = new AR.Sound(&quot;http://www.myuri.com/sound.mp3&quot;, {\n&nbsp;&nbsp;onLoaded : function(){sound.play();},\n&nbsp;&nbsp;onError : function(){\n&nbsp;&nbsp;&nbsp;&nbsp;// alert the user that the sound file could not be loaded\n&nbsp;&nbsp;&nbsp;&nbsp;},\n});\nsound.onFinishedPlaying = function(){alert(&quot;Playing finished&quot;);};\n</pre>\nNote that reloading the content is not possible - calling sound.load() while\nthe sound file is in a state different from INITIALIZED does not have any\neffect. <br/><br/>\nExecuting sound.play() while the file is in a state different from LOADED, PAUSED or\nINITIALIZED will have no effect.<br/><br/>\nWhen a Sound file in LOADED state is no longer needed, it is essential to\ncall destroy() to clean up ressources on the device.<br/><br/>\nWhen a Sound file has been paused, there are two ways to resume playing: Calling\nresume() will continue playing at the time the file was paused. Calling play() will start\nplaying the file from the very beginning. If a Sound file is initialized, and resume() is\ncalled, it will have the same effect as play(1).<br/><br/>\nThe ERROR state indicates that a problem was detected either while loading or\nplaying the file."}, "ImageDrawable": {"name": "ImageDrawable", "constructors": [{"params": [{"type": "ImageResource", "name": "imageResource", "description": " The imageResource used for the ImageDrawable."}, {"type": "float", "name": "height", "description": " The height of the ImageDrawable, in <a href=\"./module_AR.html\">SDUs</a>. The width is set\nat creation time, width is calculated according to the aspect\nratio of the underlying image."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>enabled</li>\n<li>horizontalAnchor</li>\n<li>verticalAnchor</li>\n<li>offsetX</li>\n<li>offsetY</li>\n<li>zOrder</li>\n<li>rotation</li>\n<li>scale</li>\n<li>opacity</li>\n<li>onClick</li>\n<li>roll</li>\n<li>tilt</li>\n<li>heading</li>\n</ul>"}], "description": "ImageDrawable encapsulates an image to be used as visual\nrepresentation of an ARObject. <br/><br/> If the image does not\ncome in the appropriate size, the <Drawable2D.scale> property\ncan be used to scale it down.\nThe default anchor settings for an ImageDrawable are as follows:\n<ul>\n<li>horizontal anchor: AR.CONST.HORIZONTAL_ANCHOR.CENTER</li>\n<li>vertical anchor: AR.CONST.VERTICAL_ANCHOR.MIDDLE</li>\n</ul>\nOn creation, setup parameters can be passed to customize the properties of\nthe ImageDrawable.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new ImageDrawable from an ImageResource and pass some setup parameters\nvar imageDrawable = new AR.ImageDrawable(imageResource, 5, {\n&nbsp;&nbsp;offsetX : 1,\n&nbsp;&nbsp;rotation : 190\n});\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "ImageDrawable", "extends": "Drawable2D", "superclass": "Drawable2D", "file": "architect_generated.js", "guessedtype": "property", "shortname": "ImageDrawable", "properties": {"imageResource": {"type": "ImageResource", "description": "The imageResource representing the ImageDrawable."}, "height": {"type": "float", "description": "The ImageDrawable's height in <a href=\"./module_AR.html\">SDUs</a>. The width of the\nImageDrawable will be calculated accordingly based on the\naspect ratio of the underlying Image."}}, "description": "ImageDrawable encapsulates an image to be used as visual\nrepresentation of an ARObject. <br/><br/> If the image does not\ncome in the appropriate size, the <Drawable2D.scale> property\ncan be used to scale it down.\nThe default anchor settings for an ImageDrawable are as follows:\n<ul>\n<li>horizontal anchor: AR.CONST.HORIZONTAL_ANCHOR.CENTER</li>\n<li>vertical anchor: AR.CONST.VERTICAL_ANCHOR.MIDDLE</li>\n</ul>\nOn creation, setup parameters can be passed to customize the properties of\nthe ImageDrawable.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new ImageDrawable from an ImageResource and pass some setup parameters\nvar imageDrawable = new AR.ImageDrawable(imageResource, 5, {\n&nbsp;&nbsp;offsetX : 1,\n&nbsp;&nbsp;rotation : 190\n});\n</pre>"}, "Trackable2DObject": {"name": "Trackable2DObject", "constructors": [{"params": [{"type": "Tracker", "name": "tracker", "description": " The Tracker the target is stored in"}, {"type": "string", "name": "targetName", "description": " The name of the target in the Tracker"}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties. <br/><br/> Accepted options-properties are\n<ul>\n<li>enabled</li>\n<li>renderingOrder</li>\n<li>onEnterFieldOfVision</li>\n<li>onExitFieldOfVision</li>\n<li>onClick</li>\n<li>drawables.cam</li>\n</ul>"}], "description": "A Trackable2DObject represents a virtual object bound to a\nspecific target in a target collection. The target will be\ntracked in the camera scene, and Drawables will be projected\nonto the target as soon as it becomes visible and is detected in\nthe scene. Any Trackable2DObject is linked to one target in a\nspecific target collection.<br/><br/>\nA Trackable2DObject\n<ul>\n<li>is associated with one Tracker and a specific target inside the Tracker.</li>\n<li>can have Drawables associated with it. These Drawables will represent\nthe Trackable2DObject in the camera view.</li>\n<li>can have triggers associated with it. Triggers fire on certain events\nand execute functions to react on these actions.</li>\n</ul>\nOn creation, a reference to the Tracker, as well as the name of the target in\nthe Tracker must be passed. <br/><br/> A Trackable2DObject can either be\nenabled or disabled (see ARObject.enabled). Enabled means that the\nTrackable2DObject will be considered in the tracking of objects in the\ncamera, and its triggers will fire on the appropriate events. In case the\nTrackable2DObject is disabled, it will not be considered in the tracking\nprocess, and it will not fire any triggers. Note that the associated Tracker\nmust also be enabled for the Trackable2DObject to be considered for tracking.<br/><br/>\nOn creation, setup parameters can be passed to customize the properties of\nthe Trackable2DObject.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n// a circle used for representation\nvar circle = new AR.Circle(5);\n// the referenced tracker\nvar tracker = new AR.Tracker(&quot;http://myserver.com/targetCollection1.wtc&quot;);\n// a Trackable2DObject using the &quot;car&quot; target in the tracker, using the circle as the digital representation.\nvar trackable2DObject = new AR.Trackable2DObject(tracker, &quot;car&quot;, {\ndrawables : {\ncam : circle\n}\n});\n</pre>\nFor the render size of attached Drawables, see the chapter on <a\nhref=\"./module_AR.html\">SDUs</a>."}], "namespace": "", "module": "AR", "guessedname": "Trackable2DObject", "methods": {"getDistance": {"deprecated": "The functionality is not available anymore. When the function is\ncalled, it will always return 0.", "guessedname": "getDistance", "guessedtype": "function"}}, "extends": "ARObject", "superclass": "ARObject", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Trackable2DObject", "properties": {"width": {"deprecated": "Use aspectRatio instead. Width behaves the same way as the\nproperty aspectRatio.", "type": "float"}, "aspectRatio": {"type": "float", "description": "The aspect ratio of the target, defined as width/height.\nThis property is read-only and will be generated after\nthe target was loaded. The property will be undefined if\nthe referenced Tracker was not yet loaded."}, "tracker": {"type": "Tracker", "description": "The Tracker which contains the target referenced by this\nTrackable2DObject. This property is read-only and can\nonly be set on creation."}, "targetName": {"type": "String", "description": "The name of the referenced target inside the target\ncollection. This property is read-only and can only be\nset on creation."}, "height": {"deprecated": "Use aspectRatio instead. The immutable property is undefined when\nthe Trackable2DObject was not yet loaded, and set to 1 otherwise.", "type": "float"}}, "description": "A Trackable2DObject represents a virtual object bound to a\nspecific target in a target collection. The target will be\ntracked in the camera scene, and Drawables will be projected\nonto the target as soon as it becomes visible and is detected in\nthe scene. Any Trackable2DObject is linked to one target in a\nspecific target collection.<br/><br/>\nA Trackable2DObject\n<ul>\n<li>is associated with one Tracker and a specific target inside the Tracker.</li>\n<li>can have Drawables associated with it. These Drawables will represent\nthe Trackable2DObject in the camera view.</li>\n<li>can have triggers associated with it. Triggers fire on certain events\nand execute functions to react on these actions.</li>\n</ul>\nOn creation, a reference to the Tracker, as well as the name of the target in\nthe Tracker must be passed. <br/><br/> A Trackable2DObject can either be\nenabled or disabled (see ARObject.enabled). Enabled means that the\nTrackable2DObject will be considered in the tracking of objects in the\ncamera, and its triggers will fire on the appropriate events. In case the\nTrackable2DObject is disabled, it will not be considered in the tracking\nprocess, and it will not fire any triggers. Note that the associated Tracker\nmust also be enabled for the Trackable2DObject to be considered for tracking.<br/><br/>\nOn creation, setup parameters can be passed to customize the properties of\nthe Trackable2DObject.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n// a circle used for representation\nvar circle = new AR.Circle(5);\n// the referenced tracker\nvar tracker = new AR.Tracker(&quot;http://myserver.com/targetCollection1.wtc&quot;);\n// a Trackable2DObject using the &quot;car&quot; target in the tracker, using the circle as the digital representation.\nvar trackable2DObject = new AR.Trackable2DObject(tracker, &quot;car&quot;, {\ndrawables : {\ncam : circle\n}\n});\n</pre>\nFor the render size of attached Drawables, see the chapter on <a\nhref=\"./module_AR.html\">SDUs</a>."}, "ImageResource": {"name": "ImageResource", "constructors": [{"params": [{"type": "string", "name": "uri", "description": " The uri to the image file."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>onLoaded</li>\n<li>onError</li>\n</ul>"}], "description": "ImageRessource encapsulates an image file. An ImageResource is\nrepresented via a URI pointing to the image file. An Image has a\nwidth and a height, in pixels.<br/><br/>\nImmediately after object creation, the system will start downloading the\nimage file onto the device.<br /><br />\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar imageres = new AR.ImageResource(&quot;http://path.to.my/image/resource.png&quot);\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "ImageResource", "methods": {"getUri": {"return": {"type": "string", "description": "the uri to the ImageResource."}, "description": "Returns the uri to the ImageResource.", "guessedname": "getUri", "guessedtype": "function"}, "onError": {"description": "The trigger will fire when the Image file could not be loaded.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onError."}, "getHeight": {"return": {"type": "int", "description": "the height of the image represented through the URI, in\npixels."}, "description": "Returns the height of the original image, in pixels. In case\nthe image is not yet loaded (see ImageResource.onLoaded(),\n-1 will be returned.", "guessedname": "getHeight", "guessedtype": "function"}, "isLoaded": {"return": {"type": "boolean", "description": "<ul>\n<li>true if the ImageResource is already loaded.</li>\n<li>false if the ImageResource is not yet loaded.</li>\n</ul>"}, "description": "Allows checking if the ImageResource has already been loaded\nsuccessfully.", "guessedname": "isLoaded", "guessedtype": "function"}, "getWidth": {"return": {"type": "int", "description": "the width of the image represented through the URI, in\npixels."}, "description": "Returns the width of the original image, in pixels. In case\nthe image is not yet loaded (see ImageResource.onLoaded(),\n-1 will be returned.", "guessedname": "getWidth", "guessedtype": "function"}, "onLoaded": {"params": [{"type": "int", "name": "width", "description": " the width of the ImageResource, in pixels."}, {"type": "int", "name": "height", "description": " the height of the ImageResource, in pixels."}], "description": "The trigger will fire when the Image file was loaded.<br/><br/>The trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality by assigning a custom function to onLoaded."}}, "extends": "ARchitectObject", "superclass": "ARchitectObject", "file": "architect_generated.js", "guessedtype": "property", "shortname": "ImageResource", "description": "ImageRessource encapsulates an image file. An ImageResource is\nrepresented via a URI pointing to the image file. An Image has a\nwidth and a height, in pixels.<br/><br/>\nImmediately after object creation, the system will start downloading the\nimage file onto the device.<br /><br />\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nvar imageres = new AR.ImageResource(&quot;http://path.to.my/image/resource.png&quot);\n</pre>"}, "Drawable": {"name": "Drawable", "namespace": "", "module": "AR", "guessedname": "Drawable", "methods": {"triggers.onClick": {"deprecated": "Use onClick instead."}, "onClick": {"return": {"type": "boolean", "description": "<ul>\n<li>false - The click-queue should not stop with this Drawable.\nThus, the next Drawable's onClick() function will be\nexecuted. This is the default value in case no return value is\nset or the function is not defined for this Drawable.</li>\n<li>true - The queue-execution will stop at the current\nDrawable, underlying Drawables will not receive\nonClick() calls.</li>\n</ul>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onClick."}, "params": [{"type": "ARObject", "name": "arObject", "description": " the ARObject the clicked Drawable is attached to."}], "description": "When the Drawable is clicked, the system will trigger\nDrawable.onClick(ARObject). A click on the screen might hit multiple\nDrawables, thus a click creates a \"clicked Drawables-queue\", with the\nuppermost Drawable in the front of the queue. The return value of the\nfunction determines if, after the onClick()-Function was\nexecuted for this Drawable, the queue shall continue to execute\nonClick() for the next Drawable in the queue. In case the last\nDrawable in the queue still requests to continue the click-queue,\nARObject.onClick() will be executed. If the queue still continues,\ncontext.onScreenClick() will be executed."}}, "extends": "ARchitectObject", "superclass": "ARchitectObject", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Drawable", "properties": {"rotate.heading": {"default": "0", "type": "float", "description": "Defines a rotation of the Drawable around the y-axis, specified in degrees. Values will be applied modulo 360.\nA value of 361 degrees has the same effect as setting the value to 1 degree."}, "rotate.tilt": {"default": "0", "type": "float", "description": "Defines a rotation of the Drawable around the x-axis, specified in degrees. Values will be applied modulo 360.\nA value of 361 degrees has the same effect as setting the value to 1 degree."}, "tilt": {"deprecated": "Use rotate.tilt instead.", "type": "float"}, "enabled": {"default": "true", "type": "boolean", "description": "Flag to enable/disable the Drawable. If the Drawable is\ndisabled, it will never appear on the screen and triggers on\nthis Drawable will never be fired. In case it is enabled, it\ncan be rendered on the screen and fire triggers."}, "rotate.roll": {"default": "0", "type": "float", "description": "Defines a rotation of the Drawable around the z-axis, specified in degrees. Values will be applied modulo 360.\nA value of 361 degrees has the same effect as setting the value to 1 degree."}, "heading": {"deprecated": "Use rotate.heading instead.", "type": "float"}, "roll": {"deprecated": "Use rotate.roll instead.", "type": "float"}}, "description": "A Drawable is the base class for any graphical representation of\na GeoObject. <br/><br/>\nDrawable is a superclass for other classes and must not be directly\ninstantiated by the developer.<br/><br/>\nRotations can be applied to Drawables. The local coordinate system of a Drawable is defined as\na righthanded coordinate system, following the definitions below:\n<ul>\n<li>The origin of the coordinate system is in the location of the Object the Drawable\nis attached to.</li>\n<li>The x axis is pointing right</li>\n<li>The y axis is pointing up</li>\n<li>The z axis is pointing out of the screen.</li>\n</ul>\nThe definition of right and up depend on the type of the ARObject the Drawable is attached to.\nIn case of a GeoObject, the direction are defined relative to the earth's surface, and the Drawable is always oriented towards the user. In case of\nan Trackable2DObject, the directions are defined relative to the underlying tracked object.<br/><br/>\nRotations are defined and applied in roll-tilt-heading definition (in this order), using static axis."}, "ActionArea": {"name": "ActionArea", "namespace": "", "module": "AR", "guessedname": "ActionArea", "methods": {"onEnter": {"description": "The trigger is executed when the user enters the\nActionArea.<br/><br/>\nThe trigger is null by default, and will thus result in no\naction executed when the trigger fires. A developer can add\ncustom functionality by assigning a custom function to\nonEnter."}, "onExit": {"description": "The trigger is executed when the user leaves the\nActionArea.<br/><br/>\nThe trigger is null by default, and will thus result in no\naction executed when the trigger fires. A developer can add\ncustom functionality by assigning a custom function to\nonExit."}, "isInArea": {"return": {"type": "boolean", "description": "<ul>\n<li>true if the geoLocation passed to the method is\nwithin the ActionArea</li>\n<li>false if the geoLocation passed to the method is not\nin the ActionArea</li>\n</ul>"}, "params": [{"type": "GeoLocation", "name": "geoLocation", "description": " the GeoLocation that should be checked."}], "description": "checks if a certain location is within this\nActionArea.", "guessedname": "isInArea", "guessedtype": "function"}}, "extends": "ARchitectObject", "superclass": "ARchitectObject", "file": "architect_generated.js", "guessedtype": "property", "shortname": "ActionArea", "properties": {"enabled": {"type": "boolean", "description": "Flag to enable/disable the ActionArea. If the\nActionArea is disabled, triggers on this\nActionArea will never be fired. In case it is\nenabled, it can fire triggers."}}, "description": "An ActionArea defines a certain geo area where actions should be\nexecuted on enter and on exit. An ActionArea is a 2-dimensional\narea, altitude will be ignored. As soon as the user enters the\nActionArea, onEnter() will be executed (in case the function is\ndefined). When the user leaves the ActionArea, onExit() will be\nexecuted (in case the function is defined).<br/><br/>\nThe boundary of the ActionArea is a part of the Action Area, thus an object\nlocated right at the boundary of an ActionArea will be considered to be <i>in</i>\nthe ActionArea.<br/><br/>\nActionArea is a superclass for other classes and must not be directly\ninstantiated by the developer."}, "logger": {"name": "logger", "namespace": "", "module": "AR", "guessedname": "OneTimeUseLoggerConstructionPlan", "methods": {"info": {"params": [{"type": "string", "name": "message", "description": " The info message to be logged."}], "description": "Will log an info message on the console.", "guessedname": "info", "guessedtype": "function"}, "debug": {"params": [{"type": "string", "name": "message", "description": " The debug message to be logged."}], "description": "Will log a debug message on the console.", "guessedname": "debug", "guessedtype": "function"}, "warning": {"params": [{"type": "string", "name": "message", "description": " The warning message to be logged."}], "description": "Will log a warning message to the console.", "guessedname": "warning", "guessedtype": "function"}, "activateDebugMode": {"description": "Calling this function enables the debug console.\nA button will appear on the bottom of the screen, allowing the\ndeveloper to open the debug console.", "guessedname": "activateDebugMode", "guessedtype": "function"}, "error": {"params": [{"type": "string", "name": "message", "description": " The error message to be logged."}], "description": "Will log an error message to the console.", "guessedname": "error", "guessedtype": "function"}}, "static": "", "file": "architect_generated.js", "guessedtype": "function", "shortname": "logger", "description": "logger allows logging of messages, which will then be printed in\nthe ARchitect Logging Console.<br/><br/>\nThe Singleton instance of the logger class will automatically be created on\nWorld startup and can be accessed via AR.logger.<br/><br/>"}, "HtmlDrawable": {"name": "HtmlDrawable", "constructors": [{"params": [{"type": "object", "name": "content", "description": " a JSON object describing the content of the HtmlDrawable.\nThe object must either contain a html property of type string containing the HTML string (see example above),\nor a uri property of type string pointing to some HTML content. If both properties are specified, html takes\nprecedence to uri. However, at least on of html and uri must be specified."}, {"type": "float", "name": "width", "description": " The width of the HTML drawable, in SDUs. Must be a positive number. Controls how wide the HtmlDrawable will be\nrendered on the screen. The height of the HtmlDrawable will be automatically adjusted\nkeeping the aspect ratio of the Drawable."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n<br/><br/>\nAccepted options-properties are\n<ul>\n<li>enabled</li>\n<li>horizontalAnchor</li>\n<li>verticalAnchor</li>\n<li>offsetX</li>\n<li>offsetY</li>\n<li>zOrder</li>\n<li>rotation</li>\n<li>scale</li>\n<li>opacity</li>\n<li>viewportWidth</li>\n<li>updateRate</li>\n<li>onClick</li>\n<li>onLoaded</li>\n<li>onError</li>\n<li>roll</li>\n<li>tilt</li>\n<li>heading</li>\n<li>backgroundColor</li>\n<li>clickThroughEnabled</li>\n<li>allowDocumentLocationChanges</li>\n<li>onDocumentLocationChanged</li>\n</ul>"}], "description": "A HTML-described representation of an ARObject as a plain circle.<br/><br/>\nA HtmlDrawable can be created with either\n<ul>\n<li>a string holding the HTML content</li>\n<li>using a URI that points to HTML content that will be used for representation.</li>\n</ul>\nIf both properties are given on creation, plain HTML will take precedence over the URI content.\nIf the properties are changed afterwards, the last change will take immediate effect, regardless\nof if it is specified via plain HTML or via URI.<br/><br/>\nIn case both html and uri are set to null or undefined, the HtmlDrawable will not be rendered on the screen.   \nThe default anchor settings for a HtmlDrawable are as follows:\n<ul>\n<li>horizontal anchor: AR.CONST.HORIZONTAL_ANCHOR.CENTER</li>\n<li>vertical anchor: AR.CONST.VERTICAL_ANCHOR.MIDDLE</li>\n</ul>\nOn creation, setup parameters can be passed to customize the properties of\nthe HtmlDrawable.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new html drawable and pass some setup parameters to it\nvar htmlDrawable = new AR.HtmlDrawable({html:\"&lt;div&gt;My div&lt;/div&gt;\"}, 1, {\n&nbsp;&nbsp;offsetX : 1,\n&nbsp;&nbsp;onClick : function() {\n&nbsp;&nbsp;&nbsp;&nbsp;htmlDrawable.html += \"&lt;div&gt;Another div&lt;/div&gt;\";\n&nbsp;&nbsp;},\n&nbsp;&nbsp;horizontalAnchor : AR.CONST.HORIZONTAL_ANCHOR.LEFT,\n&nbsp;&nbsp;opacity : 0.9\n});\n// precedence example:\n// htmlDrawable will use the html representation\nhtmlDrawable = new AR.HtmlDrawable({\n&nbsp;&nbsp;html:\"&lt;div&gt;My div&lt;/div&gt;\", uri:\"http://mydomain.com/my.html\"\n}, 1);\n// now, uri will take precedence:\nhtmlDrawable.uri = \"http://mydomain.com/myNew.html\";\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "HtmlDrawable", "methods": {"onError": {"description": "The trigger fires when the HtmlDrawable's content could not be loaded.\nCauses for this might include bad network connection or an invalid HTML.<br/><br/>\nThe trigger will also fire when content could not be reloaded after the URI or HTML changed.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onError."}, "evalJavaScript": {"params": [{"type": "string", "name": "js", "description": " the javascript that should be evaluated. In case of an errornous script, the execution will fail gracefully."}], "description": "Evaluates the passed javascript string in the context of the given HtmlDrawable.", "guessedname": "evalJavaScript", "guessedtype": "function"}, "onLoaded": {"description": "The trigger fires when the HtmlDrawable's content was successfully loaded.<br/><br/>\nThe trigger will also fire when content was successfully reloaded because the URI or HTML changed.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nhtmlDrawable = new AR.HtmlDrawable({\n&nbsp;&nbsp;uri:\"http://mydomain.com/my.html\"\n}, 1, { onLoaded : function(){\n&nbsp;&nbsp;uri:\"http://mydomain.com/my2.html\"\n};}); //trigger will fire again\n</pre>\n<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onLoaded."}, "onDocumentLocationChanged": {"params": [{"type": "string", "name": "uri", "description": " the URI the document.location property changes to."}], "description": "The trigger fires when the HtmlDrawable's document.location changes, for example because\na link was clicked inside the HtmlDrawable, which triggers a load of another document. The trigger will\nonly be fired when click through is allowed for the HtmlDrawable, see HtmlDrawable.clickThroughEnabled\nfor details.\n<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onDocumentLocationChanged."}}, "extends": "Drawable2D", "superclass": "Drawable2D", "file": "architect_generated.js", "guessedtype": "property", "shortname": "HtmlDrawable", "properties": {"uri": {"type": "string", "description": "A URI pointing to HTML content that will be used to render the drawable."}, "clickThroughEnabled": {"default": ": false", "type": "boolean", "description": "The property controls if clicks on HtmlDrawables will also be forwarded to the HTML content inside the HtmlDrawable.\nWhen a user clicks on a HtmlDrawable, the Drawable's onClick(arObject)-trigger will fire. If clickThroughEnabled is set to true,\nthe click will also be executed inside the HTML content, causing the onclick-function of the HTML element hit by the click to be\nexecuted."}, "width": {"type": "float", "description": "The width of the HTML drawable, in SDUs. Must be a positive number. Controls how wide the HtmlDrawable will be\nrendered on the screen. The height of the HtmlDrawable will be automatically adjusted\nkeeping the aspect ratio of the Drawable."}, "html": {"type": "string", "description": "Plain HTML string that will be used to represent the drawable. If no &lt;body&gt; tag is supplied,\nit will automatically be added with default settings (transparent background, no margin)."}, "backgroundColor": {"default": "#00000000 (transparent)", "type": "string", "description": "The background color of the HtmlDrawable in case the background of the HTML body is set to transparent. Can be passed as\nhexadecimal RGB or RGBA values (see <a\nhref=\"http://en.wikipedia.org/wiki/RGBA\">here</a>\nfor details on RGBA colorcoding). In case RGB is\nused, the alpha value is set to full opacity.<br/><br/>\nThe property is useful when the HtmlDrawable's content is set to a URI which assumes a white browser background, but sets its own background to transparent.\nSetting the backgroundColor property to a non-transparent value causes transparent webpages to have a colored background.\n<br/><br/>\n<b>Remark</b>: The background of the HtmlDrawable itself does not change, the property only sets the background the HtmlDrawable is drawn on. If the body of the\ncontent of the HtmlDrawable has a non-transparent background, changing the backgroundColor property has no effect."}, "viewportWidth": {"default": "256", "type": "int", "description": "The width of the viewport the HTML texture will be rendered on, in pixels. A larger viewport\nmakes the items in the HTMLDrawable appear smaller. The default value is set to 256.\nThe viewport must be a positive integer, not exceeding 1024 pixels."}, "updateRate": {"default": ": AR.HtmlDrawable.UPDATE_RATE.STATIC", "type": "int", "description": "The updateRate of the HTMLDrawable. If the HTML contains dynamic parts, such as CSS animations\nor JavaScript snippets that are executed and dynamically change the content of the HTMLDrawable, the\nupdateRate property gives hints to the application how often the HTMLDrawable should be refreshed.<br/><br/>\nThe following values are valid (use AR.HtmlDrawable.UPDATE_RATE for valid values):<br/>\n<table>\n<tr><td><b>Value<b></td><td><b>Description</b></td></tr>\n<tr><td>AR.HtmlDrawable.UPDATE_RATE.STATIC</td><td>The HtmlDrawables will be rendered only once, and is never updated. Useful for static HTML content.</td></tr>\n<tr><td>AR.HtmlDrawable.UPDATE_RATE.LOW</td><td>The HtmlDrawables will be updated in one second intervals as a maximum.</td></tr>\n<tr><td>AR.HtmlDrawable.UPDATE_RATE.MEDIUM</td><td>The HtmlDrawables will be updated a few times a second. The exact update rate is dependent on the underlying device.</td></tr>\n<tr><td>AR.HtmlDrawable.UPDATE_RATE.HIGH</td><td>The HtmlDrawables will be updated as often as possible, depending on the current frame rate the mobile device is able to deliver. Useful for highly dynamic HTML content.</td></tr>\n</table>\n<br/>\n<b>Remark:</b> As dynamic HtmlDrawables are memory consuming, limit the number of dynamic HTMLDrawables as much as possible.\nIf dynamic HtmlDrawables are required, try to limit those with HIGH and MEDIUM update rates, and use LOW update rates wherever possible to achieve good performance also on\nlow end devices."}, "allowDocumentLocationChanges": {"default": ": false", "type": "boolean", "description": "The property controls if changes to the document.location property of the HTML document wrapped inside the\nHtmlDrawable will actually be visible.<br/><br/>\nFor example, if a HtmlDrawable contains a link to http://www.wikitude.com, the user clicks on the link and the clickThroughEnabled\nproperty is active, the onDocumentLocationChanged trigger will fire. After that, two things can happen, depending on the\nallowDocumentLocationChanges setting:<br/><br/>\nIf allowDocumentLocationChanges is set to true, the content inside the HtmlDrawable will change to the content of http://www.wikitude.com<br/>\nIf allowDocumentLocationChanges is set to false, the content inside the HtmlDrawable will not change."}}, "description": "A HTML-described representation of an ARObject as a plain circle.<br/><br/>\nA HtmlDrawable can be created with either\n<ul>\n<li>a string holding the HTML content</li>\n<li>using a URI that points to HTML content that will be used for representation.</li>\n</ul>\nIf both properties are given on creation, plain HTML will take precedence over the URI content.\nIf the properties are changed afterwards, the last change will take immediate effect, regardless\nof if it is specified via plain HTML or via URI.<br/><br/>\nIn case both html and uri are set to null or undefined, the HtmlDrawable will not be rendered on the screen.   \nThe default anchor settings for a HtmlDrawable are as follows:\n<ul>\n<li>horizontal anchor: AR.CONST.HORIZONTAL_ANCHOR.CENTER</li>\n<li>vertical anchor: AR.CONST.VERTICAL_ANCHOR.MIDDLE</li>\n</ul>\nOn creation, setup parameters can be passed to customize the properties of\nthe HtmlDrawable.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new html drawable and pass some setup parameters to it\nvar htmlDrawable = new AR.HtmlDrawable({html:\"&lt;div&gt;My div&lt;/div&gt;\"}, 1, {\n&nbsp;&nbsp;offsetX : 1,\n&nbsp;&nbsp;onClick : function() {\n&nbsp;&nbsp;&nbsp;&nbsp;htmlDrawable.html += \"&lt;div&gt;Another div&lt;/div&gt;\";\n&nbsp;&nbsp;},\n&nbsp;&nbsp;horizontalAnchor : AR.CONST.HORIZONTAL_ANCHOR.LEFT,\n&nbsp;&nbsp;opacity : 0.9\n});\n// precedence example:\n// htmlDrawable will use the html representation\nhtmlDrawable = new AR.HtmlDrawable({\n&nbsp;&nbsp;html:\"&lt;div&gt;My div&lt;/div&gt;\", uri:\"http://mydomain.com/my.html\"\n}, 1);\n// now, uri will take precedence:\nhtmlDrawable.uri = \"http://mydomain.com/myNew.html\";\n</pre>"}, "Tracker": {"name": "Tracker", "constructors": [{"params": [{"type": "String", "name": "src", "description": " The URI to the target collection"}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties.\n&lt;br/&gt;&lt;br/&gt;\nAccepted options-properties are\n<ul>\n<li>\nenabled\n</li>\n<li>\nonDisabled\n</li>\n<li>\nonLoaded\n</li>\n<li>\nonError\n</li>\n</ul>"}], "description": "A Tracker represents a Target Collection which is created with\nthe Target Management Tool.<br/><br/>\nA Tracker needs to include the binary .wtc targets describing the targets and\nneeds to be referenced via a URI. The Tracker object is used to reference\nspecific Trackable2DObjects (the targets inside the target collection).<br/><br/>\nTrackers can be enabled and disabled. Only one Tracker can be active at a\ntime. The current enabled/disabled state of a Tracker is reflected in the\nenabled property. Should there be multiple Trackers used in the ARchitect\nfile, the following logic applies to specify the currently active Tracker:\n<ul>\n<li>When a new Tracker is created, it is automatically set to the active\none, unless it was created with enabled set to false.</li>\n<li>When a specific Tracker is enabled, it is automatically set to the\nactive one. The previously active Tracker is disabled by the system.</li>\n</ul>\nIn case a Tracker is disabled by the system, the developer will be notified\nvia the onDisabled trigger.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n// a Tracker referencing a target collection on a server\nvar tracker1 = new AR.Tracker(&quot;http://myserver.com/targetCollection1.wtc&quot;, {\nonDisabled : function(){\n//tracker has been disabled by the system\n}\n});\nvar enabled = tracker1.enabled; //true\n&lt;br/&gt;\n// a second tracker, which will cause tracker1 to be disabled\nvar tracker2 = new AR.Tracker(&quot;http://myserver.com/targetCollection1.wtc&quot;);\n&lt;br/&gt;\nenabled = tracker1.enabled; //false\nenabled = tracker2.enabled; //true"}], "namespace": "", "module": "AR", "guessedname": "Tracker", "methods": {"onError": {"description": "The trigger fires when the Tracker's target collection\ncould not be loaded. Causes for this might include bad\nnetwork connection or a corrupt target collection.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom\nfunctionality by assigning a custom function to onError."}, "onDisabled": {"description": "The trigger fires when the Tracker has been disabled by\nthe system. It does not fire when enabled is set to\nfalse manually.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom\nfunctionality by assigning a custom function to onDisabled."}, "onLoaded": {"description": "The trigger fires when the Tracker's target collection\nwas successfully loaded. TrackableObjects related to\nthis Tracker can only be tracked after the Tracker was\nsuccessfully loaded.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom\nfunctionality by assigning a custom function to onLoaded."}, "isLoaded": {"return": {"type": "boolean", "description": "<ul>\n<li>true if the Tracker has successfully loaded.</li>\n<li>false if the Tracker has not been successfully loaded yet.</li>\n</ul>"}, "description": "Returns a boolean value indicating if the tracker has\nalready been successfully loaded.", "guessedname": "isLoaded", "guessedtype": "function"}}, "extends": "ARchitectObject", "superclass": "ARchitectObject", "file": "architect_generated.js", "guessedtype": "property", "shortname": "Tracker", "properties": {"src": {"type": "String", "description": "The URI pointing to the referenced target collection.\nThe property is read-only and can only be set on\ncreation."}, "enabled": {"type": "boolean", "description": "The current activity state of the Tracker. This property\nmight by changed automatically by the system, in case\nanother Tracker is enabled, causing this Tracker to be\ndisabled. The onDisabled trigger will be called in this\ncase."}}, "description": "A Tracker represents a Target Collection which is created with\nthe Target Management Tool.<br/><br/>\nA Tracker needs to include the binary .wtc targets describing the targets and\nneeds to be referenced via a URI. The Tracker object is used to reference\nspecific Trackable2DObjects (the targets inside the target collection).<br/><br/>\nTrackers can be enabled and disabled. Only one Tracker can be active at a\ntime. The current enabled/disabled state of a Tracker is reflected in the\nenabled property. Should there be multiple Trackers used in the ARchitect\nfile, the following logic applies to specify the currently active Tracker:\n<ul>\n<li>When a new Tracker is created, it is automatically set to the active\none, unless it was created with enabled set to false.</li>\n<li>When a specific Tracker is enabled, it is automatically set to the\nactive one. The previously active Tracker is disabled by the system.</li>\n</ul>\nIn case a Tracker is disabled by the system, the developer will be notified\nvia the onDisabled trigger.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n// a Tracker referencing a target collection on a server\nvar tracker1 = new AR.Tracker(&quot;http://myserver.com/targetCollection1.wtc&quot;, {\nonDisabled : function(){\n//tracker has been disabled by the system\n}\n});\nvar enabled = tracker1.enabled; //true\n&lt;br/&gt;\n// a second tracker, which will cause tracker1 to be disabled\nvar tracker2 = new AR.Tracker(&quot;http://myserver.com/targetCollection1.wtc&quot;);\n&lt;br/&gt;\nenabled = tracker1.enabled; //false\nenabled = tracker2.enabled; //true"}, "context": {"name": "context", "namespace": "", "module": "AR", "guessedname": "OneTimeUseContextConstructionPlan", "methods": {"onScreenClick": {"description": "Executed when the user clicks on the screen, no HTML\nelement was hit and either\n<ul>\n<li>no Drawable was hit on the click, or</li>\n<li>Drawables were hit on the click, but even the last\nDrawable in the click queue returned false in its\nonClick trigger.</li>\n</ul>\nSee AR.Drawable.onClick() for details on the click-queue.", "guessedname": "_onScreenClick", "guessedtype": "property"}, "destroyAll": {"description": "Destroys all objects.\nSee AR.ARchitectObject.destroy() for effects of this call.", "guessedname": "_destroyAll", "guessedtype": "function"}, "startVideoPlayer": {"params": [{"type": "string", "name": "uri", "description": " the uri to the video"}], "description": "Starts the native video player and plays the video at the\nspecified URI. Will close the video player automatically when\nthe video finished.", "guessedname": "startVideoPlayer", "guessedtype": "function"}, "onLocationChanged": {"params": [{"type": "double", "name": "latitude", "description": " the current latitude of the user, based on WGS84"}, {"type": "double", "name": "longitude", "description": " the current longitude of the user, based on\nWGS84"}, {"type": "double", "name": "altitude", "description": " the current altitude of the user, based on WGS84"}, {"type": "double", "name": "accuracy", "description": " The accuracy of the reported location, see\nAR.CONST.LOCATION_ACCURACY for details"}], "description": "The function will be called as soon as\n<ul>\n<li>the location is fetched the first time, or</li>\n<li>the location of the user changes.</li>\n</ul>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onLocationChanged.", "guessedname": "_onLocationChanged", "guessedtype": "property"}, "openInBrowser": {"params": [{"type": "string", "name": "url", "description": " the url to be opened"}, {"type": "boolean", "name": "forceNativeBrowser", "description": " open URL in native browser (true) or in\na webview within the application (false). If not specified,\ndefault value is false."}], "description": "Opens the specified url in the native Browser.\nIf forceNativeBrowser is true, the URL will be opened\nin the native browser (e.g. Safari on iOS), otherwise it will be opened\nin a new webview.", "guessedname": "openInBrowser", "guessedtype": "function"}}, "static": "", "file": "architect_generated.js", "guessedtype": "property", "shortname": "context", "properties": {"scene.minScalingDistance": {"default": "10", "type": "float", "description": "The distance, in meters, at which objects will start to appear smaller on the screen when the user moves further away.\nIf the user is closer than minScalingDistance, the object will not appear any bigger than the size it took on at minScalingDistance. Must be a positive number."}, "scene.maxScalingDistance": {"default": "20000", "type": "float", "description": "The distance, in meters, at which objects will keep their size on the screen even when the user moves further away.\nIf the user is further than maxScalingDistance, the object will not appear any smaller than the size it took on at maxScalingDistance. Must be a positive number."}, "clickBehavior": {"default": "AR.CONST.CLICK_BEHAVIOR.CLICK", "type": "string", "description": "clickBehavior controls what should be considered a click. The following options are available:<br/><br/>\n<ul>\n<li><b>AR.CONST.CLICK_BEHAVIOR.CLICK</b>: the platform considers a click only when the user presses and\nreleases the screen at the same screen region. The click is fired after the user releases the finger from the screen</li>\n<li><b>AR.CONST.CLICK_BEHAVIOR.TOUCH_DOWN</b>: click fires as soon as the user touches the screen</li>\n<li><b>AR.CONST.CLICK_BEHAVIOR.TOUCH_UP</b>: click fires as soon as the user puts the finger off the screen, regardless of where the user started the touch on the screen.</li>\n</ul>", "guessedname": "_clickBehavior", "guessedtype": "property"}, "scene.cullingDistance": {"default": "50000", "type": "int", "description": "The maximum distance at which objects are visible in the scene, in meters. If an object's distance to the user is further than the culling distance,\nthe object will not be visible in the scene."}, "scene.scalingFactor": {"default": "0.1", "type": "float", "description": "The amount of scaling that is applied between minScalingDistance and maxScalingDistance.\nThe scalingFactor controls the size the object takes on at maxScalingDistance, in percentage of the size it took on at minScalingDistance.<br/><br/>\nMust be in the range of [0,1].<br/><br/>\nSet the scalingFactor to 1 if no scaling should be applied for the objects."}, "services.camera": {"default": "true", "type": "boolean", "description": "Controls if the camera is active or not.<br/><br/>\nIf the property is set to true, the camera is visible on the screen, and computer vision components are activated.\nIf the property is set to false, the camera will be disabled, a black background will be visible and computer\nvision components are specifically deactivated.<br/><br/>\nIt is recommended to disable the camera service temporarily when fullscreen HTML is shown. This reduces\npower consumption and increases performance."}, "services.sensors": {"default": "true", "type": "boolean", "description": "Controls if the sensors are active or not. Sensors include GPS, mangetometer, accelerometer and gyroscope.<br/><br/>\nIf the property is set to true, any geo-related components (such as GeoObjects and ActionRanges) are active.\nIf the property is set to false, any geo-related components will not be visible on the screen, and triggers will not fire.<br/><br/>\nIt is recommended to disable the sensors service when only computer vision components are used. This reduces\npower consumption and increases performance."}}, "description": "context includes some general functions which allow interaction\nwith system components.<br/><br/>\nThe Singleton instance of the class will automatically be created on World\nstartup and can be accessed via AR.context.<br/><br/>\ncontext also allows for some custom functionality, for example\nonLocationChanged, which will be triggered by the system as soon as the\nuser's location changes. It enables the developer to find out about the\nuser's location and thus setup the AR scene to his needs.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\nAR.context.onLocationChanged = function(latitude, longitude, altitude, accuracy){\n&nbsp;&nbsp;//now, add custom functionality to build the AR scene based on the location\n&nbsp;&nbsp;...\n}\n</pre>"}, "AnimatedImageDrawable": {"name": "AnimatedImageDrawable", "constructors": [{"params": [{"type": "ImageResource", "name": "imageResource", "description": " The imageResource representing the sprite sheet\nwhich is used for the AnimatedImageDrawable."}, {"type": "float", "name": "height", "description": " The height of the AnimatedImageDrawable, in <a\nhref=\"./module_AR.html\">SDUs</a>. The width is set at creation\ntime, width is calculated according to the aspect ratio of the\nunderlying key frame images."}, {"type": "int", "name": "keyFrameWidth", "description": " The width of the key frame images in the sprite\nsheet, in pixels."}, {"type": "int", "name": "keyFrameHeight", "description": " The height of the key frame images in the sprite\nsheet, in pixels."}, {"type": "object", "name": "options", "description": " Setup-Parameters to customize additional object\nproperties. <br/><br/> Accepted options-properties are\n<ul>\n<li>keyFrame</li>: The start keyframe. If not specified, the\nvalue defaults to 0.\n<li>enabled</li>\n<li>horizontalAnchor</li>\n<li>verticalAnchor</li>\n<li>offsetX</li>\n<li>offsetY</li>\n<li>zOrder</li>\n<li>rotation</li>\n<li>scale</li>\n<li>opacity</li>\n<li>onClick</li>\n<li>onFinish</li>\n<li>roll</li>\n<li>tilt</li>\n<li>heading</li>\n</ul>"}], "description": "AnimatedImageDrawable allows to created animated images using\nsprite sheets.<br/><br/> A sprite sheet is an image file which\ncontains all key frame images required for the animation. The\nkey frame image size (width and height) is passed at creation\ntime and must be equal for all key frame images. Key frame\nimages will be managed in an array, starting with entry 0. The\nkey frame image array will be filled from left to right, row by\nrow. Any partly filled key frames at the edge of the sprites\nsheet will be ignored.\nThe default anchor settings for an AnimatedImageDrawable are as follows:\n<ul>\n<li>horizontal anchor: AR.CONST.HORIZONTAL_ANCHOR.CENTER</li>\n<li>vertical anchor: AR.CONST.VERTICAL_ANCHOR.MIDDLE</li>\n</ul>\nOn creation, setup parameters can be passed to customize the properties of\nthe AnimatedImageDrawable.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new AnimatedImageDrawable from an ImageResource and pass some setup parameters\nvar animatedImageDrawable = new AR.AnimatedImageDrawable(imageResource, 5, 40, 50 {\nenabled : false,\noffsetX : 1,\nrotation : 190\n});\n// start playing the Animation, with keyframes 0-4, each keyframe is shown 10 miliseconds, and the animation is looped 10 times\nanimatedImageDrawable.animate([0, 1, 2, 3, 4], 10, 10);\n</pre>"}], "namespace": "", "module": "AR", "guessedname": "AnimatedImageDrawable", "methods": {"onFinish": {"description": "The trigger will fire when the AnimatedImageDrawable finishes.<br/><br/>\nThe trigger is null by default, and will thus result in no action\nexecuted when the trigger fires. A developer can add custom functionality\nby assigning a custom function to onFinish."}, "animate": {"params": [{"type": "Array(int)", "name": "keyFramePos", "description": " The keyframes that will be played one by\none. The numbers in the array will be clamped to the\navailable keyframes in the key frame image array."}, {"type": "int", "name": "duration", "description": " The duration of each keyframe in\nmilliseconds."}, {"type": "int", "name": "loopTimes", "description": " Defines how often the animation should be\nplayed in a row. A negative value indicates an\ninfinite looping.<br/> The parameter is optional and\ndefaults to 1."}], "description": "Starts the animation based on the key frames\nprovided.", "guessedname": "animate", "guessedtype": "function"}, "setKeyFrame": {"params": [{"type": "int", "name": "keyFramePos", "description": " The position of the key frame in the\narray."}], "description": "Stops any animation and sets the content of the\nAnimatedImageDrawable to a still image that is at\nposition keyFrameNr in the key frame image array.\nThe keyFramePos will be clamped to valid positions\nin the key frame image array in case the number\nexceeds the available frames.", "guessedname": "setKeyFrame", "guessedtype": "function"}}, "extends": "ImageDrawable", "superclass": "ImageDrawable", "file": "architect_generated.js", "guessedtype": "property", "shortname": "AnimatedImageDrawable", "description": "AnimatedImageDrawable allows to created animated images using\nsprite sheets.<br/><br/> A sprite sheet is an image file which\ncontains all key frame images required for the animation. The\nkey frame image size (width and height) is passed at creation\ntime and must be equal for all key frame images. Key frame\nimages will be managed in an array, starting with entry 0. The\nkey frame image array will be filled from left to right, row by\nrow. Any partly filled key frames at the edge of the sprites\nsheet will be ignored.\nThe default anchor settings for an AnimatedImageDrawable are as follows:\n<ul>\n<li>horizontal anchor: AR.CONST.HORIZONTAL_ANCHOR.CENTER</li>\n<li>vertical anchor: AR.CONST.VERTICAL_ANCHOR.MIDDLE</li>\n</ul>\nOn creation, setup parameters can be passed to customize the properties of\nthe AnimatedImageDrawable.<br/><br/>\n<div class=\"paragraph\">Example:</div>\n<pre class=\"prettyprint\">\n//create a new AnimatedImageDrawable from an ImageResource and pass some setup parameters\nvar animatedImageDrawable = new AR.AnimatedImageDrawable(imageResource, 5, 40, 50 {\nenabled : false,\noffsetX : 1,\nrotation : 190\n});\n// start playing the Animation, with keyframes 0-4, each keyframe is shown 10 miliseconds, and the animation is looped 10 times\nanimatedImageDrawable.animate([0, 1, 2, 3, 4], 10, 10);\n</pre>"}}, "version": "3.0", "modules": {"AR": {"description": "In this section, some general concepts are described, which apply to multiple\nclasses within the ARchitect library.<br/><br/>\n<div class=\"paragraph\">Scaled Distance Units (SDUs)</div><br/> In AR\napplications, the term \"size of an object\" cannot be defined just in pixels\nor similar size measurements. Unlike in 2-dimensional applications, such as\nmaps, the size of an object inherently depends on the distance from the\nviewer to the object.<br/><br/>\nImagine a virtual 2-dimensional logo which should be placed right on top of a\ncertain store location. In a map-based application, the size can easily be\ndefined by specifying the width and height of the logo in pixels. In AR\napplications, the logo should appear a big as the building itself, which is\ndependent on the distance in a natural way.<br/><br/>\nThe term \"pixels\" or similar measurements cannot be used in AR applications,\nas they are defined in a static way and do not allow the application to scale\nthe objects in a natural way. Thus, the Wikitude ARchitect introduces Scaled\nDistance Units. SDUs are defined not only in relation to the object's size\nitself, but also in relation to the distance from the viewer to the object\nitself.<br/><br/>\nFor Drawables attached to GeoObjects, 1 SDU is defined as the screen-size of\nan object which is 1 meter high and located 10 meters from the viewer. If a\ndrawable's width is defined as 5 SDU, it will exactly overlap an object which\nis 5 meters wide and is located in 10 meters distance.<br/> For Drawables\nattached to Trackable2DObjects, SDUs are determined by the underlying\ntrackable's size. The Drawables anchor point will be set to the center of the\nTrackable2DObject, and 1 SDU is defined to be the height of the image, as\ndescribed in the figure below:<br/> <img\nsrc=\"assets/Trackable2DDrawables.jpg\"/> <br/><br/> A circle with\nradius set to 0.25 will be rendered accordingly:<br/> <img\nsrc=\"assets/circleInTrackable.jpg\"/><br/><br/>\n<div class=\"paragraph\">Distance Based Scaling (DBS)</div><br/> Another\nimportant concept of an AR application is \"Distance Based Scaling\". Think\nabout the logo again, which represents the store location of a certain brand.\nIf we are in 10 meters viewing distance, the logo will perfectly overlap the\nbuilding, given that we have set the drawable's width and height to the right\nSDUs. Now, we are moving away from the store location. Without the concept of\nDSB, the logo will quickly vanish from the screen, as it will be too small to\nsee - especially when the SDUs are not set to a high value. A similar\nsituation appears when we are moving towards the location - the logo will\nsoon appear very big and obstruct the entire screen.<br/><br/>\nTo avoid situations like this, where drawables are only clearly visible in a\ncertain viewing distance, and are otherwise soon too big or too small to see\nrespectively, the Wikitude ARchitect introduces Distance Based Scaling (DBS).\nIt ensures that drawables do not exceed certain limits of their original\nappearance.<br/><br/>\nWe define two values, cutoff_min and cutoff_max.<br/> cutoff_min is set to\n10 meters and defines the viewing distance at which the drawables will not be\nscaled anymore. Regardless if the viewing distance is 10 meters or even\ncloser to the original location, the drawable will still have the same size\non the screen. This avoids drawables obstructing the entire screen.<br/>\ncutoff_max is set to 20 kilometers and defines the viewing distance beyond\nwhich the drawables will not be scaled anymore. The drawable will still\nappear in the same size on the screen, regardless if the distance to the\nobject is 20 kilometers, or even more. This avoids drawables getting too\nsmall to see on the screen.<br/> The cutoff_max size of the drawable is set\nto 10% of its size at cutoff_min (the defined SDU-value), resulting in any\ndrawable not appearing smaller than 10% of its size if the object was only 10\nmeters away.<br/> Between cutoff_min and cutoff_max, the objects are scaled\nbased on a scaling function of x^(0.2). The effect of this particular scaling\nfunction is that drawables representing near objects are downscaled fairly\nquickly as the user is moving away from the object. The further the user\nmoves away from the object, the lesser the loss of size will be visible for\nthe user, to allow a smooth user experience.<br/>", "submodules": [], "classlist": ["ARchitectObject", "ARObject", "Drawable", "Drawable2D", "Label", "Model", "Circle", "HtmlDrawable", "ImageDrawable", "AnimatedImageDrawable", "Location", "GeoLocation", "RelativeLocation", "GeoObject", "ActionArea", "ActionRange", "BoundingRectangle", "ImageResource", "Animation", "ModelAnimation", "PropertyAnimation", "AnimationGroup", "Sound", "Style", "CONST", "context", "logger", "Tracker", "Trackable2DObject", "radar"], "filelist": ["architect_generated.js"], "subdata": {}, "name": "AR"}}, "filemap": {"architect_generated.js": {"classlist": ["ARchitectObject", "ARObject", "Drawable", "Drawable2D", "Label", "Model", "Circle", "HtmlDrawable", "ImageDrawable", "AnimatedImageDrawable", "Location", "GeoLocation", "RelativeLocation", "GeoObject", "ActionArea", "ActionRange", "BoundingRectangle", "ImageResource", "Animation", "ModelAnimation", "PropertyAnimation", "AnimationGroup", "Sound", "Style", "CONST", "context", "logger", "Tracker", "Trackable2DObject", "radar"], "name": "architect_generated.js", "module": "AR"}}}